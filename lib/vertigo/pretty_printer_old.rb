require_relative 'code'

module Vertigo

  class PrettyPrinter

    def print ast
      ast.accept(self)
    end

    def visitRoot root,args=nil
      code=Code.new
      code << "--automatically generated by Vertigo VHDL tool"
      root.design_units.each{|du| code << du.accept(self)}
      code
    end

    def visitComment comment,args=nil
      code=Code.new
      comment.list.each{|e| code << e.accept(self)}
      code
    end

    def visitDesignUnit du,args=nil
      code=Code.new
      code << du.context_clause.accept(self)
      code << du.library_unit.accept(self)
      code
    end

    def visitContextClause ctxcl,args=nil
      code=Code.new
      ctxcl.list.each{|e| code << e.accept(self)}
      code
    end

    def visitLibraryClause libcl,args=nil
      code=Code.new
      libcl.name_list.each{|e| code << e.accept(self)}
      code
    end

    def visitUseClause usecl,args=nil
      code=Code.new
      name_list=usecl.selected_name_list.map{|e| e.accept(self)}.join('.')
      code << "use #{name_list}"
      code
    end

    def visitEntity entity,args=nil
      code=Code.new
      code << "entity #{name=entity.name.str} is"
      code.indent=2
      code << entity.generics.accept(self) if entity.generics
      code << entity.ports.accept(self) if entity.ports

      code.indent=0
      code << "end entity #{name};"
      code
    end

    def visitGenerics generics,args=nil
      code=Code.new
      code << "generic("
      code.indent=2
      generics.list.each{|e| code << e.accept(self)}
      code.indent=0
      code << ");"
      code
    end

    def visitPorts ports,args=nil
      code=Code.new
      code << "port("
      code.indent=2
      ports.list.each{|e| code << e.accept(self)}
      code.indent=0
      code << ");"
      code
    end

    def visitSigDeclaration sdecl,args=nil
      code=Code.new
      name=sdecl.name.accept(self)
      mode=sdecl.mode.accept(self)
      type=sdecl.type.accept(self)
      init=sdecl.init.accept(self) if sdecl.init
      code << "#{name} : #{mode} #{type} #{init}"
      code
    end

    def visitSubType subtype,args=nil
      pp subtype
      name=subtype.name.accept(self)
    end

    #=======================================
    def visitArchitecture arch,args=nil
      code=Code.new
      code
    end

    def visitIdent id,args=nil
      id.token.val
    end

  end
end

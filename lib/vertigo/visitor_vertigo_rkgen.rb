# ============================================================
# This code was generated by rkgen utility.
# DO NOT MODIFY !
# ============================================================
 
module Vertigo
 
  class Visitor
    def visit ast
      puts "visiting ast #{ast}"
      ast.accept(self)
    end
     
    def visitRoot(root_,args=nil)
      root_.design_units.each{|design_unit_| design_unit_.accept(self,args)}
    end
     
    def visitLibrary(library_,args=nil)
      library_.name.accept(self,args)
    end
     
    def visitUse(use_,args=nil)
      use_.library.accept(self,args)
      use_.package.accept(self,args)
      use_.element.accept(self,args)
    end
     
    def visitEntity(entity_,args=nil)
      entity_.name.accept(self,args)
      entity_.generics.each{|generic_| generic_.accept(self,args)}
      entity_.ports.each{|port_| port_.accept(self,args)}
    end
     
    def visitGeneric(generic_,args=nil)
      generic_.name.accept(self,args)
      generic_.type.accept(self,args)
      generic_.init.accept(self,args)
    end
     
    def visitInput(input_,args=nil)
      input_.name.accept(self,args)
      input_.type.accept(self,args)
      input_.init.accept(self,args)
    end
     
    def visitOutput(output_,args=nil)
      output_.name.accept(self,args)
      output_.type.accept(self,args)
      output_.init.accept(self,args)
    end
     
    def visitInOut(inout_,args=nil)
      inout_.name.accept(self,args)
      inout_.type.accept(self,args)
      inout_.init.accept(self,args)
    end
     
    def visitArchitecture(architecture_,args=nil)
      architecture_.name.accept(self,args)
      architecture_.entity_name.accept(self,args)
      architecture_.decls.each{|decl_| decl_.accept(self,args)}
      architecture_.body.accept(self,args)
    end
     
    def visitBody(body_,args=nil)
      body_.elements.each{|element_| element_.accept(self,args)}
    end
     
    def visitProcess(process_,args=nil)
      process_.sensitivity.accept(self,args)
      process_.decls.each{|decl_| decl_.accept(self,args)}
      process_.body.accept(self,args)
    end
     
    def visitSensitivity(sensitivity_,args=nil)
      sensitivity_.elements.each{|element_| element_.accept(self,args)}
    end
     
    def visitSigAssign(sigassign_,args=nil)
      sigassign_.lhs.accept(self,args)
      sigassign_.rhs.accept(self,args)
    end
     
    def visitVarAssign(varassign_,args=nil)
      varassign_.lhs.accept(self,args)
      varassign_.rhs.accept(self,args)
    end
     
    def visitWait(wait_,args=nil)
      wait_.until_.accept(self,args)
      wait_.for_.accept(self,args)
    end
     
    def visitIf(if_,args=nil)
      if_.cond.accept(self,args)
      if_.body.accept(self,args)
      if_.elsifs.each{|elsif_| elsif_.accept(self,args)}
      if_.else_.accept(self,args)
    end
     
    def visitElsif(elsif_,args=nil)
      elsif_.cond.accept(self,args)
      elsif_.body.accept(self,args)
    end
     
    def visitElse(else_,args=nil)
      else_.body.accept(self,args)
    end
     
    def visitSignal(signal_,args=nil)
      signal_.name.accept(self,args)
      signal_.type.accept(self,args)
      signal_.init.accept(self,args)
    end
     
    def visitStdType(stdtype_,args=nil)
      stdtype_.ident.accept(self,args)
    end
     
    def visitNamedType(namedtype_,args=nil)
      namedtype_.ident.accept(self,args)
    end
     
    def visitArrayType(arraytype_,args=nil)
      arraytype_.name.accept(self,args)
      arraytype_.discrete_ranges.each{|discrete_range_| discrete_range_.accept(self,args)}
    end
     
    def visitDiscreteRange(discreterange_,args=nil)
      discreterange_.lhs.accept(self,args)
      discreterange_.dir.accept(self,args)
      discreterange_.rhs.accept(self,args)
    end
     
    def visitParenth(parenth_,args=nil)
      parenth_.expr.accept(self,args)
    end
     
    def visitWaveform(waveform_,args=nil)
      waveform_.elements.each{|element_| element_.accept(self,args)}
    end
     
    def visitCondExpr(condexpr_,args=nil)
      condexpr_.whens.each{|when_| when_.accept(self,args)}
      condexpr_.else_.accept(self,args)
    end
     
    def visitWhen(when_,args=nil)
      when_.expr.accept(self,args)
      when_.cond.accept(self,args)
    end
     
    def visitBinary(binary_,args=nil)
      binary_.lhs.accept(self,args)
      binary_.op.accept(self,args)
      binary_.rhs.accept(self,args)
    end
     
    def visitAfter(after_,args=nil)
      after_.lhs.accept(self,args)
      after_.rhs.accept(self,args)
    end
     
    def visitTimed(timed_,args=nil)
      timed_.lhs.accept(self,args)
      timed_.rhs.accept(self,args)
    end
     
    def visitIdent(ident_,args=nil)
      ident_.tok.accept(self,args)
    end
     
    def visitIntLit(intlit_,args=nil)
      intlit_.tok.accept(self,args)
    end
     
    def visitSelectedName(selectedname_,args=nil)
      selectedname_.lhs.accept(self,args)
      selectedname_.rhs.accept(self,args)
    end
     
    def visitFuncCall(funccall_,args=nil)
      funccall_.name.accept(self,args)
      funccall_.actual_args.each{|actual_arg_| actual_arg_.accept(self,args)}
    end
     
    def visitLabel(label_,args=nil)
      label_.ident.accept(self,args)
    end
  end # visitor
end # Vertigo

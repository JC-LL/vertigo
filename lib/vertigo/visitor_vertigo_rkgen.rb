# ============================================================
# This code was generated by rkgen utility.
# DO NOT MODIFY !
# ============================================================

module Vertigo

  class Visitor
    def visit ast
      puts "visiting ast #{ast}"
      ast.accept(self)
    end

    def visitRoot(root_,args=nil)
      root_.design_units.each{|design_unit_| design_unit_.accept(self,args)}
    end

    def visitLibrary(library_,args=nil)
      library_.name.accept(self,args)
    end

    def visitUse(use_,args=nil)
      use_.library.accept(self,args)
      use_.package.accept(self,args)
      use_.element.accept(self,args)
    end

    def visitEntity(entity_,args=nil)
      entity_.name.accept(self,args)
      entity_.generics.each{|generic_| generic_.accept(self,args)}
      entity_.ports.each{|port_| port_.accept(self,args)}
    end

    def visitGeneric(generic_,args=nil)
      generic_.name.accept(self,args)
      generic_.type.accept(self,args)
      generic_.init.accept(self,args)
    end

    def visitInput(input_,args=nil)
      input_.name.accept(self,args)
      input_.type.accept(self,args)
      input_.init.accept(self,args)
    end

    def visitOutput(output_,args=nil)
      output_.name.accept(self,args)
      output_.type.accept(self,args)
      output_.init.accept(self,args)
    end

    def visitInOut(inout_,args=nil)
      inout_.name.accept(self,args)
      inout_.type.accept(self,args)
      inout_.init.accept(self,args)
    end

    def visitPackage(package_,args=nil)
      package_.name.accept(self,args)
      package_.decls.each{|decl_| decl_.accept(self,args)}
    end

    def visitPackageBody(packagebody_,args=nil)
      packagebody_.name.accept(self,args)
      packagebody_.decls.each{|decl_| decl_.accept(self,args)}
    end

    def visitProcedureDecl(proceduredecl_,args=nil)
      proceduredecl_.name.accept(self,args)
      proceduredecl_.formal_args.each{|formal_arg_| formal_arg_.accept(self,args)}
      proceduredecl_.decls.each{|decl_| decl_.accept(self,args)}
      proceduredecl_.body.accept(self,args)
    end

    def visitFormalArg(formalarg_,args=nil)
      formalarg_.signal.accept(self,args)
      formalarg_.direction.accept(self,args)
      formalarg_.name.accept(self,args)
      formalarg_.type.accept(self,args)
    end

    def visitArchitecture(architecture_,args=nil)
      architecture_.name.accept(self,args)
      architecture_.entity_name.accept(self,args)
      architecture_.decls.each{|decl_| decl_.accept(self,args)}
      architecture_.body.accept(self,args)
    end

    def visitBody(body_,args=nil)
      body_.elements.each{|element_| element_.accept(self,args)}
    end

    def visitProcess(process_,args=nil)
      process_.sensitivity.accept(self,args)
      process_.decls.each{|decl_| decl_.accept(self,args)}
      process_.body.accept(self,args)
    end

    def visitSensitivity(sensitivity_,args=nil)
      sensitivity_.elements.each{|element_| element_.accept(self,args)}
    end

    def visitEntityInstance(entityinstance_,args=nil)
      entityinstance_.full_name.accept(self,args)
      entityinstance_.arch_name.accept(self,args)
      entityinstance_.generic_map.accept(self,args)
      entityinstance_.port_map.accept(self,args)
    end

    def visitComponentDecl(componentdecl_,args=nil)
      componentdecl_.name.accept(self,args)
      componentdecl_.generics.each{|generic_| generic_.accept(self,args)}
      componentdecl_.ports.each{|port_| port_.accept(self,args)}
    end

    def visitComponentInstance(componentinstance_,args=nil)
      componentinstance_.name.accept(self,args)
      componentinstance_.generic_map.accept(self,args)
      componentinstance_.port_map.accept(self,args)
    end

    def visitPortMap(portmap_,args=nil)
      portmap_.elements.each{|element_| element_.accept(self,args)}
    end

    def visitGenericMap(genericmap_,args=nil)
      genericmap_.elements.each{|element_| element_.accept(self,args)}
    end

    def visitMap(map_,args=nil)
      map_.lhs.accept(self,args)
      map_.rhs.accept(self,args)
    end
    
    def visitAttributeDecl(attributedecl_,args=nil)
      attributedecl_.name.accept(self,args)
      attributedecl_.type.accept(self,args)
    end

    def visitAttributeSpec(attributespec_,args=nil)
      attributespec_.name.accept(self,args)
      attributespec_.entity_spec.accept(self,args)
      attributespec_.expr.accept(self,args)
    end

    def visitEntitySpec(entityspec_,args=nil)
      entityspec_.elements.each{|element_| element_.accept(self,args)}
      entityspec_.entity_class.accept(self,args)
    end

    def visitSigAssign(sigassign_,args=nil)
      sigassign_.lhs.accept(self,args)
      sigassign_.rhs.accept(self,args)
    end

    def visitVarAssign(varassign_,args=nil)
      varassign_.lhs.accept(self,args)
      varassign_.rhs.accept(self,args)
    end

    def visitWait(wait_,args=nil)
      wait_.until_.accept(self,args)
      wait_.for_.accept(self,args)
    end

    def visitIf(if_,args=nil)
      if_.cond.accept(self,args)
      if_.body.accept(self,args)
      if_.elsifs.each{|elsif_| elsif_.accept(self,args)}
      if_.else_.accept(self,args)
    end

    def visitElsif(elsif_,args=nil)
      elsif_.cond.accept(self,args)
      elsif_.body.accept(self,args)
    end

    def visitElse(else_,args=nil)
      else_.body.accept(self,args)
    end

    def visitCase(case_,args=nil)
      case_.expr.accept(self,args)
      case_.whens.each{|when_| when_.accept(self,args)}
    end

    def visitCaseWhen(casewhen_,args=nil)
      casewhen_.expr.accept(self,args)
      casewhen_.body.accept(self,args)
    end

    def visitNullStmt(nullstmt_,args=nil)
      nullstmt_.dummy.accept(self,args)
    end

    def visitAssert(assert_,args=nil)
      assert_.cond.accept(self,args)
      assert_.report.accept(self,args)
      assert_.severity.accept(self,args)
    end

    def visitReport(report_,args=nil)
      report_.expr.accept(self,args)
      report_.severity.accept(self,args)
    end

    def visitWithSelect(withselect_,args=nil)
      withselect_.with_expr.accept(self,args)
      withselect_.assigned.accept(self,args)
      withselect_.selected_whens.each{|selected_when_| selected_when_.accept(self,args)}
    end

    def visitSelectedWhen(selectedwhen_,args=nil)
      selectedwhen_.lhs.accept(self,args)
      selectedwhen_.rhs.accept(self,args)
    end

    def visitTypeDecl(typedecl_,args=nil)
      typedecl_.name.accept(self,args)
      typedecl_.spec.accept(self,args)
    end

    def visitEnumDecl(enumdecl_,args=nil)
      enumdecl_.elements.each{|element_| element_.accept(self,args)}
    end

    def visitRecordDecl(recorddecl_,args=nil)
      recorddecl_.elements.each{|element_| element_.accept(self,args)}
    end

    def visitRecordItem(recorditem_,args=nil)
      recorditem_.name.accept(self,args)
      recorditem_.type.accept(self,args)
    end

    def visitArrayDecl(arraydecl_,args=nil)
      arraydecl_.dim_decls.each{|dim_decl_| dim_decl_.accept(self,args)}
      arraydecl_.type.accept(self,args)
    end

    def visitArrayDimDecl(arraydimdecl_,args=nil)
      arraydimdecl_.type_mark.accept(self,args)
      arraydimdecl_.range.accept(self,args)
    end

    def visitConstant(constant_,args=nil)
      constant_.name.accept(self,args)
      constant_.type.accept(self,args)
      constant_.expr.accept(self,args)
    end

    def visitSignal(signal_,args=nil)
      signal_.name.accept(self,args)
      signal_.type.accept(self,args)
      signal_.init.accept(self,args)
    end

    def visitVariable(variable_,args=nil)
      variable_.name.accept(self,args)
      variable_.type.accept(self,args)
      variable_.init.accept(self,args)
    end

    def visitStdType(stdtype_,args=nil)
      stdtype_.ident.accept(self,args)
    end

    def visitNamedType(namedtype_,args=nil)
      namedtype_.ident.accept(self,args)
    end

    def visitArrayType(arraytype_,args=nil)
      arraytype_.name.accept(self,args)
      arraytype_.discrete_ranges.each{|discrete_range_| discrete_range_.accept(self,args)}
    end

    def visitDiscreteRange(discreterange_,args=nil)
      discreterange_.lhs.accept(self,args)
      discreterange_.dir.accept(self,args)
      discreterange_.rhs.accept(self,args)
    end

    def visitParenth(parenth_,args=nil)
      parenth_.expr.accept(self,args)
    end

    def visitWaveform(waveform_,args=nil)
      waveform_.elements.each{|element_| element_.accept(self,args)}
    end

    def visitCondExpr(condexpr_,args=nil)
      condexpr_.whens.each{|when_| when_.accept(self,args)}
      condexpr_.else_.accept(self,args)
    end

    def visitWhen(when_,args=nil)
      when_.expr.accept(self,args)
      when_.cond.accept(self,args)
    end

    def visitBinary(binary_,args=nil)
      binary_.lhs.accept(self,args)
      binary_.op.accept(self,args)
      binary_.rhs.accept(self,args)
    end

    def visitAfter(after_,args=nil)
      after_.lhs.accept(self,args)
      after_.rhs.accept(self,args)
    end

    def visitTimed(timed_,args=nil)
      timed_.lhs.accept(self,args)
      timed_.rhs.accept(self,args)
    end

    def visitAttributed(attributed_,args=nil)
      attributed_.lhs.accept(self,args)
      attributed_.rhs.accept(self,args)
    end

    def visitConcat(concat_,args=nil)
      concat_.lhs.accept(self,args)
      concat_.rhs.accept(self,args)
    end

    def visitIdent(ident_,args=nil)
      ident_.tok.accept(self,args)
    end

    def visitIntLit(intlit_,args=nil)
      intlit_.tok.accept(self,args)
    end

    def visitSelectedName(selectedname_,args=nil)
      selectedname_.lhs.accept(self,args)
      selectedname_.rhs.accept(self,args)
    end

    def visitFuncCall(funccall_,args=nil)
      funccall_.name.accept(self,args)
      funccall_.actual_args.each{|actual_arg_| actual_arg_.accept(self,args)}
    end

    def visitAggregate(aggregate_,args=nil)
      aggregate_.elements.each{|element_| element_.accept(self,args)}
    end

    def visitLabel(label_,args=nil)
      label_.ident.accept(self,args)
    end

    def visitAssoc(assoc_,args=nil)
      assoc_.lhs.accept(self,args)
      assoc_.rhs.accept(self,args)
    end
  end # visitor
end # Vertigo

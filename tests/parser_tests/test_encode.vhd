-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.3
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
--
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity encode is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    xin1 : IN STD_LOGIC_VECTOR (31 downto 0);
    xin2 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of encode is
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "encode,hls_ip_2017_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100tcsg324-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.635000,HLS_SYN_LAT=249,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=63,HLS_SYN_FF=3105,HLS_SYN_LUT=4624}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (41 downto 0) := "000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (41 downto 0) := "000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (41 downto 0) := "000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (41 downto 0) := "000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (41 downto 0) := "000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (41 downto 0) := "000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (41 downto 0) := "000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (41 downto 0) := "000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (41 downto 0) := "000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (41 downto 0) := "001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (41 downto 0) := "010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (41 downto 0) := "100000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_16 : STD_LOGIC_VECTOR (4 downto 0) := "10110";
    constant ap_const_lv5_17 : STD_LOGIC_VECTOR (4 downto 0) := "10111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv39_7FFFFFFFD4 : STD_LOGIC_VECTOR (38 downto 0) := "111111111111111111111111111111111010100";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv6_17 : STD_LOGIC_VECTOR (5 downto 0) := "010111";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv6_15 : STD_LOGIC_VECTOR (5 downto 0) := "010101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv31_4800 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000100100000000000";
    constant ap_const_lv15_4800 : STD_LOGIC_VECTOR (14 downto 0) := "100100000000000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv35_0 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000000";
    constant ap_const_lv29_1FFFFF80 : STD_LOGIC_VECTOR (28 downto 0) := "11111111111111111111110000000";
    constant ap_const_lv29_80 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000010000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_FFFFFF40 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111101000000";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_3000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000011000000000000";
    constant ap_const_lv32_FFFFD000 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111101000000000000";
    constant ap_const_lv15_5000 : STD_LOGIC_VECTOR (14 downto 0) := "101000000000000";
    constant ap_const_lv15_3C00 : STD_LOGIC_VECTOR (14 downto 0) := "011110000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv43_234 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000001000110100";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_FFFFE310 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111110001100010000";
    constant ap_const_lv32_FFFFF9B0 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111100110110000";
    constant ap_const_lv32_1CF0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001110011110000";
    constant ap_const_lv32_650 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000011001010000";
    constant ap_const_lv32_31E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100011110";
    constant ap_const_lv32_FFFFFF2A : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111100101010";
    constant ap_const_lv31_5800 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000101100000000000";
    constant ap_const_lv15_5800 : STD_LOGIC_VECTOR (14 downto 0) := "101100000000000";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tqmf_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal tqmf_ce0 : STD_LOGIC;
    signal tqmf_we0 : STD_LOGIC;
    signal tqmf_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tqmf_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tqmf_ce1 : STD_LOGIC;
    signal tqmf_we1 : STD_LOGIC;
    signal tqmf_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal h_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal h_ce0 : STD_LOGIC;
    signal h_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal h_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal h_ce1 : STD_LOGIC;
    signal h_q1 : STD_LOGIC_VECTOR (14 downto 0);
    signal xh : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal delay_bpl_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal delay_bpl_ce0 : STD_LOGIC;
    signal delay_bpl_we0 : STD_LOGIC;
    signal delay_bpl_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal delay_dltx_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal delay_dltx_ce0 : STD_LOGIC;
    signal delay_dltx_we0 : STD_LOGIC;
    signal delay_dltx_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal delay_dltx_ce1 : STD_LOGIC;
    signal delay_dltx_we1 : STD_LOGIC;
    signal delay_dltx_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal rlt1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal al1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal rlt2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal al2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sl : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal detl : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal decis_levl_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal decis_levl_ce0 : STD_LOGIC;
    signal decis_levl_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal quant26bt_pos_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal quant26bt_pos_ce0 : STD_LOGIC;
    signal quant26bt_pos_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal quant26bt_neg_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal quant26bt_neg_ce0 : STD_LOGIC;
    signal quant26bt_neg_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal il : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal qq4_code4_table_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal qq4_code4_table_ce0 : STD_LOGIC;
    signal qq4_code4_table_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal dlt : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal nbl : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal wl_code_table_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal wl_code_table_ce0 : STD_LOGIC;
    signal wl_code_table_q0 : STD_LOGIC_VECTOR (12 downto 0);
    signal ilb_table_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal ilb_table_ce0 : STD_LOGIC;
    signal ilb_table_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal plt : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal plt1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal plt2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal delay_bph_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal delay_bph_ce0 : STD_LOGIC;
    signal delay_bph_we0 : STD_LOGIC;
    signal delay_bph_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal delay_dhx_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal delay_dhx_ce0 : STD_LOGIC;
    signal delay_dhx_we0 : STD_LOGIC;
    signal delay_dhx_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal delay_dhx_ce1 : STD_LOGIC;
    signal delay_dhx_we1 : STD_LOGIC;
    signal delay_dhx_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal rh1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ah1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal rh2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ah2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sh : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ih : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal deth : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal dh : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal nbh : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ph : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ph1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ph2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal reg_688 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal xa_cast_fu_722_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal xb_cast_fu_736_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tqmf_addr_reg_2673 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_4_fu_752_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_4_reg_2681 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond2_fu_746_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp_fu_770_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal phitmp_reg_2696 : STD_LOGIC_VECTOR (4 downto 0);
    signal h_load_reg_2701 : STD_LOGIC_VECTOR (14 downto 0);
    signal h_ptr_load_reg_2706 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_9_fu_783_p2 : STD_LOGIC_VECTOR (45 downto 0);
    signal tmp_9_reg_2711 : STD_LOGIC_VECTOR (45 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_1_fu_796_p2 : STD_LOGIC_VECTOR (45 downto 0);
    signal tmp_1_reg_2716 : STD_LOGIC_VECTOR (45 downto 0);
    signal xa_2_fu_805_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal xb_2_fu_814_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal tmp_s_fu_824_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_s_reg_2731 : STD_LOGIC_VECTOR (38 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal xa_1_fu_840_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal xa_1_reg_2737 : STD_LOGIC_VECTOR (49 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal xa_1_cast_fu_846_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal xa_1_cast_reg_2742 : STD_LOGIC_VECTOR (46 downto 0);
    signal xb_1_fu_894_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal xb_1_reg_2747 : STD_LOGIC_VECTOR (49 downto 0);
    signal xb_1_cast_fu_900_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal xb_1_cast_reg_2752 : STD_LOGIC_VECTOR (46 downto 0);
    signal tqmf_addr_2_reg_2757 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tqmf_ptr1_0_rec_fu_917_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tqmf_ptr1_0_rec_reg_2762 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_5_fu_940_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_5_reg_2775 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_3_reg_2780 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_fu_934_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal delay_bpl_load_reg_2785 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal delay_dltx_load_reg_2790 : STD_LOGIC_VECTOR (31 downto 0);
    signal zl_fu_992_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal p_01_rec_i_fu_998_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_01_rec_i_reg_2800 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal pl_1_fu_1034_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal pl_1_reg_2818 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond5_fu_1010_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_56_i_fu_1054_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_56_i_reg_2823 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_53_i_fu_1068_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_53_i_reg_2828 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal zl_1_fu_1074_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal tmp_58_i_reg_2838 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal tmp_50_i_fu_1099_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_50_i_reg_2843 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal tmp_27_fu_1141_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_reg_2848 : STD_LOGIC_VECTOR (0 downto 0);
    signal n_assign_1_fu_1155_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_assign_1_reg_2853 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i1_cast_fu_1163_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal tmp_i1_cast_reg_2858 : STD_LOGIC_VECTOR (46 downto 0);
    signal tmp_35_i_fu_1167_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_i_reg_2864 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal mil_fu_1173_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal mil_reg_2868 : STD_LOGIC_VECTOR (4 downto 0);
    signal decis_levl_load_reg_2878 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal tmp_5_reg_2883 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal tmp_39_i_fu_1202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal qq4_code4_table_load_reg_2911 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal tmp_30_fu_1323_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_30_reg_2916 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_45_i_fu_1327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_45_i_reg_2921 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_reg_2926 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal wd2_cast_reg_2932 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_38_reg_2942 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal grp_upzero_fu_653_ap_done : STD_LOGIC;
    signal tmp_19_i_fu_1479_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_i_reg_2948 : STD_LOGIC_VECTOR (63 downto 0);
    signal apl2_fu_1611_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal apl2_reg_2953 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal apl1_fu_1652_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal apl1_reg_2959 : STD_LOGIC_VECTOR (31 downto 0);
    signal apl2_assign_fu_1680_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal apl2_assign_reg_2965 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal delay_bph_load_reg_2971 : STD_LOGIC_VECTOR (31 downto 0);
    signal delay_dhx_load_reg_2976 : STD_LOGIC_VECTOR (31 downto 0);
    signal zl_2_fu_1798_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal p_01_rec_i1_fu_1804_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_01_rec_i1_reg_2986 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal pl_4_fu_1840_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal pl_4_reg_3004 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond4_fu_1816_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_56_i1_fu_1860_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_56_i1_reg_3009 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_53_i1_fu_1874_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_53_i1_reg_3014 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal zl_3_fu_1880_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal tmp_50_i1_fu_1885_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_50_i1_reg_3024 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal tmp_26_fu_1921_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_reg_3029 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_fu_1941_p2 : STD_LOGIC_VECTOR (42 downto 0);
    signal tmp_31_reg_3039 : STD_LOGIC_VECTOR (42 downto 0);
    signal tmp_54_fu_1962_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_54_reg_3044 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal tmp_29_fu_1970_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_47_cast1_fu_1992_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal tmp_47_cast1_reg_3055 : STD_LOGIC_VECTOR (46 downto 0);
    signal tmp_33_fu_2036_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal tmp_36_reg_3068 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal tmp_58_fu_2183_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_58_reg_3074 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_48_i_fu_2187_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_48_i_reg_3079 : STD_LOGIC_VECTOR (0 downto 0);
    signal wd2_4_cast_reg_3084 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal tmp_59_reg_3094 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal tmp_19_i1_fu_2315_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_i1_reg_3100 : STD_LOGIC_VECTOR (63 downto 0);
    signal apl2_1_fu_2447_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal apl2_1_reg_3105 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal apl1_4_fu_2488_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal apl1_4_reg_3111 : STD_LOGIC_VECTOR (31 downto 0);
    signal apl2_assign_1_fu_2516_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal apl2_assign_1_reg_3117 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal grp_upzero_fu_653_ap_start : STD_LOGIC;
    signal grp_upzero_fu_653_ap_idle : STD_LOGIC;
    signal grp_upzero_fu_653_ap_ready : STD_LOGIC;
    signal grp_upzero_fu_653_dlt : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_upzero_fu_653_dlti_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_upzero_fu_653_dlti_ce0 : STD_LOGIC;
    signal grp_upzero_fu_653_dlti_we0 : STD_LOGIC;
    signal grp_upzero_fu_653_dlti_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_upzero_fu_653_dlti_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_upzero_fu_653_dlti_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_upzero_fu_653_dlti_ce1 : STD_LOGIC;
    signal grp_upzero_fu_653_dlti_we1 : STD_LOGIC;
    signal grp_upzero_fu_653_dlti_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_upzero_fu_653_dlti_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_upzero_fu_653_bli_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_upzero_fu_653_bli_ce0 : STD_LOGIC;
    signal grp_upzero_fu_653_bli_we0 : STD_LOGIC;
    signal grp_upzero_fu_653_bli_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_upzero_fu_653_bli_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tqmf_ptr_0_rec_reg_526 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_537 : STD_LOGIC_VECTOR (3 downto 0);
    signal xa1_reg_548 : STD_LOGIC_VECTOR (49 downto 0);
    signal xb1_reg_558 : STD_LOGIC_VECTOR (49 downto 0);
    signal tqmf_ptr_0_pn_rec_reg_568 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal i_1_reg_579 : STD_LOGIC_VECTOR (4 downto 0);
    signal zl1_i_reg_590 : STD_LOGIC_VECTOR (63 downto 0);
    signal dlt_pn_rec_i_reg_600 : STD_LOGIC_VECTOR (2 downto 0);
    signal mil_i_reg_611 : STD_LOGIC_VECTOR (4 downto 0);
    signal zl1_i1_reg_623 : STD_LOGIC_VECTOR (63 downto 0);
    signal dlt_pn_rec_i1_reg_633 : STD_LOGIC_VECTOR (2 downto 0);
    signal ih_assign_reg_644 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_32_fu_2030_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_grp_upzero_fu_653_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal tqmf_ptr_0_rec_cast_fu_740_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tqmf_ptr_0_sum1_cast_fu_764_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_sum_cast_fu_912_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tqmf_ptr_0_sum_cast_fu_929_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_01_rec_i_cast_fu_1004_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_36_i_fu_1179_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_41_i_fu_1206_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_fu_1239_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i3_fu_1393_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_01_rec_i1_cast_fu_1810_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i1_fu_2229_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_25_fu_1768_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal apl1_3_cast_fu_1750_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal apl2_assign_cast_fu_1688_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_1115_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal el_assign_fu_1126_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_34_i_cast_fu_1421_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal il_assign_cast_fu_1219_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal nbl_assign_2_cast_fu_1363_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_fu_1431_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_45_fu_2604_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal apl1_7_cast_fu_2586_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal apl2_assign_1_cast_fu_2524_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_58_i1_fu_1905_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_assign_2_fu_1951_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_46_cast_cast_fu_1978_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_51_cast_cast_fu_2043_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_34_i1_cast_fu_2267_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal nbl_assign_3_cast_fu_2199_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_40_fu_2234_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl_fu_692_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal p_shl1_fu_704_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal p_shl_cast_fu_700_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal p_shl1_cast_fu_712_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal xa_fu_716_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal xb_fu_730_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal xb_fu_730_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal tqmf_ptr_0_sum1_fu_758_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_9_fu_783_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_9_fu_783_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_796_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_1_fu_796_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_cast_fu_802_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal tmp_28_cast_fu_811_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal tmp_s_fu_824_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_cast_fu_830_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal tmp_15_fu_836_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal tmp_fu_833_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal p_shl2_fu_852_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal p_shl3_fu_864_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal p_shl2_cast_fu_860_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal p_shl3_cast_fu_872_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal tmp_8_fu_876_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal tmp_22_cast_fu_882_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal tmp_17_fu_890_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal tmp_2_fu_886_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal p_sum_fu_906_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tqmf_ptr_0_sum_fu_923_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_4_fu_946_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal tmp_10_fu_966_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal zl_fu_992_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal zl_fu_992_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_fu_1020_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal pl_1_fu_1034_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal pl_1_fu_1034_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_fu_1040_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_56_i_fu_1054_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_56_i_fu_1054_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_53_i_fu_1068_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_53_i_fu_1068_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal pl_2_fu_1079_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_fu_1149_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_38_i_fu_1187_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_38_i_fu_1187_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_38_i_fu_1187_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal ril_2_fu_1212_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_14_fu_1229_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_i_fu_1253_p3 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_i1_cast_29_fu_1249_p1 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_i2_fu_1261_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal wl_code_table_load_c_fu_1277_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_42_i_fu_1267_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_1281_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_7_fu_1291_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal nbl_assign_1_fu_1295_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_fu_1307_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal nbl_assign_1_cast_fu_1301_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_i_fu_1315_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_18_fu_1336_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_18_fu_1336_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_fu_1336_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal nbl_assign_2_fu_1357_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal wd1_fu_1373_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_33_i_fu_1398_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_33_i_cast_cast_fu_1403_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal wd3_fu_1407_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_34_i_fu_1413_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_15_i_fu_1461_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_i_fu_1461_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i4_fu_1453_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_i_fu_1461_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_i_fu_1479_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_i_fu_1479_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal wd2_fu_1501_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal wd2_1_cast_fu_1509_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal tmp_22_fu_1519_p4 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_shl_i1_fu_1544_p3 : STD_LOGIC_VECTOR (38 downto 0);
    signal p_shl_i1_cast_fu_1552_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_20_i_cast_fu_1540_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal wd2_1_fu_1513_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal tmp_24_fu_1529_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_44_fu_1562_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_47_fu_1572_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_21_i_fu_1556_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_42_fu_1533_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_i_cast_fu_1579_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_5_i_cast_cast_fu_1593_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp6_fu_1601_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp6_cast_fu_1607_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_i_fu_1583_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl_i2_fu_1617_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal p_shl_i2_cast_fu_1625_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal tmp_i3_cast_fu_1497_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal tmp_i5_fu_1629_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal apl_v_i_cast_cast_fu_1645_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_i_fu_1635_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_i_fu_1658_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_i1_fu_1663_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_i_fu_1674_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_50_fu_1670_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal apl1_8_fu_1697_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal apl1_8_cast_fu_1706_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_i_fu_1710_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal wd3_0_apl1_i_fu_1715_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal apl1_8_cast1_fu_1702_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal apl1_2_fu_1726_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal apl1_2_cast_fu_1732_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_i_fu_1736_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_51_fu_1722_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal apl1_3_fu_1742_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zl_2_fu_1798_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal zl_2_fu_1798_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_52_fu_1826_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal pl_4_fu_1840_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal pl_4_fu_1840_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_53_fu_1846_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_56_i1_fu_1860_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_56_i1_fu_1860_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_53_i1_fu_1874_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_53_i1_fu_1874_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal pl_5_fu_1901_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_31_fu_1941_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_1995_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_55_fu_2008_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_1_fu_2016_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_assign_3_fu_2022_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal decis_fu_2004_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_34_fu_2056_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_35_fu_2074_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_35_fu_2074_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_35_fu_2074_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal p_shl_i3_fu_2103_p3 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_i7_cast_fu_2099_p1 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_i8_fu_2111_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_37_fu_2127_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal wd_fu_2117_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_39_fu_2141_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_56_fu_2151_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal nbh_assign_1_fu_2155_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_57_fu_2167_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal nbh_assign_1_cast_fu_2161_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_i2_fu_2175_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal nbl_assign_3_fu_2193_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal wd1_1_fu_2209_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_33_i1_fu_2244_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_33_i1_cast_cast_fu_2249_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal wd3_2_fu_2253_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_34_i1_fu_2259_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_15_i1_fu_2297_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_i1_fu_2297_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i10_fu_2289_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_i1_fu_2297_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_i1_fu_2315_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_i1_fu_2315_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal wd2_2_fu_2337_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal wd2_5_cast_fu_2345_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal tmp_41_fu_2355_p4 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_shl_i4_fu_2380_p3 : STD_LOGIC_VECTOR (38 downto 0);
    signal p_shl_i4_cast_fu_2388_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_20_i1_cast9_fu_2376_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal wd2_3_fu_2349_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal tmp_43_fu_2365_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_61_fu_2398_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_62_fu_2408_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_21_i1_fu_2392_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_60_fu_2369_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_i1_cast_fu_2415_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_5_i1_cast_cast_fu_2429_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp7_fu_2437_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp7_cast_fu_2443_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_i1_fu_2419_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl_i5_fu_2453_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal p_shl_i5_cast_fu_2461_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal tmp_i10_cast_fu_2333_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal tmp_i11_fu_2465_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal apl_v_i1_cast_cast_fu_2481_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_i1_fu_2471_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_i1_fu_2494_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_i3_fu_2499_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_i1_fu_2510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_63_fu_2506_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal apl1_9_fu_2533_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal apl1_9_cast_fu_2542_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_i1_fu_2546_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal wd3_0_apl1_i1_fu_2551_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal apl1_9_cast8_fu_2538_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal apl1_6_fu_2562_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal apl1_6_cast_fu_2568_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_i1_fu_2572_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_64_fu_2558_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal apl1_7_fu_2578_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_65_fu_2636_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (41 downto 0);
    signal tmp_38_i_fu_1187_p10 : STD_LOGIC_VECTOR (46 downto 0);

    component upzero IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        dlt : IN STD_LOGIC_VECTOR (31 downto 0);
        dlti_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        dlti_ce0 : OUT STD_LOGIC;
        dlti_we0 : OUT STD_LOGIC;
        dlti_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        dlti_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dlti_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        dlti_ce1 : OUT STD_LOGIC;
        dlti_we1 : OUT STD_LOGIC;
        dlti_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        dlti_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        bli_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        bli_ce0 : OUT STD_LOGIC;
        bli_we0 : OUT STD_LOGIC;
        bli_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        bli_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component encode_mux_42_32_fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component encode_tqmf IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component encode_h IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component encode_delay_bpl IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component encode_delay_dltx IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component encode_decis_levl IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component encode_quant26bt_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component encode_quant26bt_cud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component encode_qq4_code4_dEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component encode_wl_code_taeOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component encode_ilb_table IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;



begin
    tqmf_U : component encode_tqmf
    generic map (
        DataWidth => 32,
        AddressRange => 24,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => tqmf_address0,
        ce0 => tqmf_ce0,
        we0 => tqmf_we0,
        d0 => xin1,
        q0 => tqmf_q0,
        address1 => tqmf_address1,
        ce1 => tqmf_ce1,
        we1 => tqmf_we1,
        d1 => tqmf_d1);

    h_U : component encode_h
    generic map (
        DataWidth => 15,
        AddressRange => 24,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => h_address0,
        ce0 => h_ce0,
        q0 => h_q0,
        address1 => h_address1,
        ce1 => h_ce1,
        q1 => h_q1);

    delay_bpl_U : component encode_delay_bpl
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => delay_bpl_address0,
        ce0 => delay_bpl_ce0,
        we0 => delay_bpl_we0,
        d0 => grp_upzero_fu_653_bli_d0,
        q0 => delay_bpl_q0);

    delay_dltx_U : component encode_delay_dltx
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => delay_dltx_address0,
        ce0 => delay_dltx_ce0,
        we0 => delay_dltx_we0,
        d0 => grp_upzero_fu_653_dlti_d0,
        q0 => delay_dltx_q0,
        address1 => grp_upzero_fu_653_dlti_address1,
        ce1 => delay_dltx_ce1,
        we1 => delay_dltx_we1,
        d1 => grp_upzero_fu_653_dlti_d1,
        q1 => delay_dltx_q1);

    decis_levl_U : component encode_decis_levl
    generic map (
        DataWidth => 15,
        AddressRange => 30,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => decis_levl_address0,
        ce0 => decis_levl_ce0,
        q0 => decis_levl_q0);

    quant26bt_pos_U : component encode_quant26bt_bkb
    generic map (
        DataWidth => 6,
        AddressRange => 31,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => quant26bt_pos_address0,
        ce0 => quant26bt_pos_ce0,
        q0 => quant26bt_pos_q0);

    quant26bt_neg_U : component encode_quant26bt_cud
    generic map (
        DataWidth => 6,
        AddressRange => 31,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => quant26bt_neg_address0,
        ce0 => quant26bt_neg_ce0,
        q0 => quant26bt_neg_q0);

    qq4_code4_table_U : component encode_qq4_code4_dEe
    generic map (
        DataWidth => 16,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => qq4_code4_table_address0,
        ce0 => qq4_code4_table_ce0,
        q0 => qq4_code4_table_q0);

    wl_code_table_U : component encode_wl_code_taeOg
    generic map (
        DataWidth => 13,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => wl_code_table_address0,
        ce0 => wl_code_table_ce0,
        q0 => wl_code_table_q0);

    ilb_table_U : component encode_ilb_table
    generic map (
        DataWidth => 12,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ilb_table_address0,
        ce0 => ilb_table_ce0,
        q0 => ilb_table_q0);

    delay_bph_U : component encode_delay_bpl
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => delay_bph_address0,
        ce0 => delay_bph_ce0,
        we0 => delay_bph_we0,
        d0 => grp_upzero_fu_653_bli_d0,
        q0 => delay_bph_q0);

    delay_dhx_U : component encode_delay_dltx
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => delay_dhx_address0,
        ce0 => delay_dhx_ce0,
        we0 => delay_dhx_we0,
        d0 => grp_upzero_fu_653_dlti_d0,
        q0 => delay_dhx_q0,
        address1 => grp_upzero_fu_653_dlti_address1,
        ce1 => delay_dhx_ce1,
        we1 => delay_dhx_we1,
        d1 => grp_upzero_fu_653_dlti_d1,
        q1 => delay_dhx_q1);

    grp_upzero_fu_653 : component upzero
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_upzero_fu_653_ap_start,
        ap_done => grp_upzero_fu_653_ap_done,
        ap_idle => grp_upzero_fu_653_ap_idle,
        ap_ready => grp_upzero_fu_653_ap_ready,
        dlt => grp_upzero_fu_653_dlt,
        dlti_address0 => grp_upzero_fu_653_dlti_address0,
        dlti_ce0 => grp_upzero_fu_653_dlti_ce0,
        dlti_we0 => grp_upzero_fu_653_dlti_we0,
        dlti_d0 => grp_upzero_fu_653_dlti_d0,
        dlti_q0 => grp_upzero_fu_653_dlti_q0,
        dlti_address1 => grp_upzero_fu_653_dlti_address1,
        dlti_ce1 => grp_upzero_fu_653_dlti_ce1,
        dlti_we1 => grp_upzero_fu_653_dlti_we1,
        dlti_d1 => grp_upzero_fu_653_dlti_d1,
        dlti_q1 => grp_upzero_fu_653_dlti_q1,
        bli_address0 => grp_upzero_fu_653_bli_address0,
        bli_ce0 => grp_upzero_fu_653_bli_ce0,
        bli_we0 => grp_upzero_fu_653_bli_we0,
        bli_d0 => grp_upzero_fu_653_bli_d0,
        bli_q0 => grp_upzero_fu_653_bli_q0);

    encode_mux_42_32_fYi_U4 : component encode_mux_42_32_fYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din1 => ap_const_lv32_FFFFE310,
        din2 => ap_const_lv32_FFFFF9B0,
        din3 => ap_const_lv32_1CF0,
        din4 => ap_const_lv32_650,
        din5 => ih_assign_reg_644,
        dout => tmp_34_fu_2056_p6);

    encode_mux_42_32_fYi_U5 : component encode_mux_42_32_fYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din1 => ap_const_lv32_31E,
        din2 => ap_const_lv32_FFFFFF2A,
        din3 => ap_const_lv32_31E,
        din4 => ap_const_lv32_FFFFFF2A,
        din5 => ih_assign_reg_644,
        dout => tmp_37_fu_2127_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_upzero_fu_653_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_upzero_fu_653_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state38))) then
                    ap_reg_grp_upzero_fu_653_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_upzero_fu_653_ap_ready)) then
                    ap_reg_grp_upzero_fu_653_ap_start <= ap_const_logic_0;
                end if;
            end if;
        end if;
    end process;


    dlt_pn_rec_i1_reg_633_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                dlt_pn_rec_i1_reg_633 <= p_01_rec_i1_reg_2986;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                dlt_pn_rec_i1_reg_633 <= ap_const_lv3_0;
            end if;
        end if;
    end process;

    dlt_pn_rec_i_reg_600_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                dlt_pn_rec_i_reg_600 <= p_01_rec_i_reg_2800;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                dlt_pn_rec_i_reg_600 <= ap_const_lv3_0;
            end if;
        end if;
    end process;

    i_1_reg_579_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                i_1_reg_579 <= i_5_reg_2775;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                i_1_reg_579 <= ap_const_lv5_0;
            end if;
        end if;
    end process;

    i_reg_537_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                i_reg_537 <= i_4_reg_2681;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_reg_537 <= ap_const_lv4_0;
            end if;
        end if;
    end process;

    ih_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                                ih(1 downto 0) <= tmp_51_cast_cast_fu_2043_p3(1 downto 0);
            elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                                ih(1 downto 0) <= tmp_46_cast_cast_fu_1978_p3(1 downto 0);
            end if;
        end if;
    end process;

    ih_assign_reg_644_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = tmp_32_fu_2030_p2) and (ap_const_logic_1 = ap_CS_fsm_state35))) then
                ih_assign_reg_644 <= tmp_29_fu_1970_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                ih_assign_reg_644 <= tmp_33_fu_2036_p3;
            end if;
        end if;
    end process;

    mil_i_reg_611_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = tmp_39_i_fu_1202_p2) and (ap_const_lv1_1 = tmp_35_i_reg_2864) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                mil_i_reg_611 <= mil_reg_2868;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                mil_i_reg_611 <= ap_const_lv5_0;
            end if;
        end if;
    end process;

    tqmf_ptr_0_pn_rec_reg_568_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                tqmf_ptr_0_pn_rec_reg_568 <= tqmf_ptr1_0_rec_reg_2762;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                tqmf_ptr_0_pn_rec_reg_568 <= ap_const_lv6_0;
            end if;
        end if;
    end process;

    tqmf_ptr_0_rec_reg_526_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tqmf_ptr_0_rec_reg_526 <= phitmp_reg_2696;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                tqmf_ptr_0_rec_reg_526 <= ap_const_lv5_2;
            end if;
        end if;
    end process;

    xa1_reg_548_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                xa1_reg_548 <= xa_2_fu_805_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                xa1_reg_548 <= xa_cast_fu_722_p1;
            end if;
        end if;
    end process;

    xb1_reg_558_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                xb1_reg_558 <= xb_2_fu_814_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                xb1_reg_558 <= xb_cast_fu_736_p1;
            end if;
        end if;
    end process;

    zl1_i1_reg_623_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                zl1_i1_reg_623 <= zl_3_fu_1880_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                zl1_i1_reg_623 <= zl_2_fu_1798_p2;
            end if;
        end if;
    end process;

    zl1_i_reg_590_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                zl1_i_reg_590 <= zl_1_fu_1074_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                zl1_i_reg_590 <= zl_fu_992_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
                ah1 <= apl1_7_cast_fu_2586_p1;
                ah2 <= apl2_assign_1_cast_fu_2524_p1;
                rh1 <= tmp_45_fu_2604_p2;
                rh2 <= rh1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                al1 <= apl1_3_cast_fu_1750_p1;
                al2 <= apl2_assign_cast_fu_1688_p1;
                rlt1 <= tmp_25_fu_1768_p2;
                rlt2 <= rlt1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
                apl1_4_reg_3111 <= apl1_4_fu_2488_p2;
                apl2_1_reg_3105 <= apl2_1_fu_2447_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                apl1_reg_2959 <= apl1_fu_1652_p2;
                apl2_reg_2953 <= apl2_fu_1611_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then
                apl2_assign_1_reg_3117 <= apl2_assign_1_fu_2516_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                apl2_assign_reg_2965 <= apl2_assign_fu_1680_p3;
                delay_bph_load_reg_2971 <= delay_bph_q0;
                delay_dhx_load_reg_2976 <= delay_dhx_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                decis_levl_load_reg_2878 <= decis_levl_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                delay_bpl_load_reg_2785 <= delay_bpl_q0;
                delay_dltx_load_reg_2790 <= delay_dltx_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_upzero_fu_653_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then
                    deth(14 downto 3) <= tmp_34_i1_cast_fu_2267_p1(14 downto 3);
                ph1 <= ph;
                ph2 <= ph1;
                tmp_19_i1_reg_3100 <= tmp_19_i1_fu_2315_p2;
                tmp_59_reg_3094 <= tmp_15_i1_fu_2297_p2(63 downto 63);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                    detl(14 downto 3) <= tmp_34_i_cast_fu_1421_p1(14 downto 3);
                plt <= tmp_21_fu_1431_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                dh <= tmp_35_fu_2074_p2(46 downto 15);
                tmp_36_reg_3068 <= tmp_35_fu_2074_p2(46 downto 15);
                tmp_48_i_reg_3079 <= tmp_48_i_fu_2187_p2;
                tmp_58_reg_3074 <= tmp_58_fu_2183_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                dlt <= tmp_18_fu_1336_p2(46 downto 15);
                    nbl(14 downto 0) <= nbl_assign_2_cast_fu_1363_p1(14 downto 0);
                tmp_19_reg_2926 <= tmp_18_fu_1336_p2(46 downto 15);
                wd2_cast_reg_2932 <= nbl_assign_2_fu_1357_p3(14 downto 11);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                h_load_reg_2701 <= h_q0;
                h_ptr_load_reg_2706 <= h_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_4_reg_2681 <= i_4_fu_752_p2;
                tqmf_addr_reg_2673 <= tqmf_ptr_0_rec_cast_fu_740_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                i_5_reg_2775 <= i_5_fu_940_p2;
                tqmf_addr_2_reg_2757 <= p_sum_cast_fu_912_p1(5 - 1 downto 0);
                tqmf_ptr1_0_rec_reg_2762 <= tqmf_ptr1_0_rec_fu_917_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                    il(5 downto 0) <= il_assign_cast_fu_1219_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                mil_reg_2868 <= mil_fu_1173_p2;
                tmp_35_i_reg_2864 <= tmp_35_i_fu_1167_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                n_assign_1_reg_2853 <= n_assign_1_fu_1155_p3;
                sl <= tmp_13_fu_1115_p2;
                tmp_27_reg_2848 <= el_assign_fu_1126_p2(31 downto 31);
                tmp_50_i_reg_2843 <= zl1_i_reg_590(45 downto 14);
                    tmp_i1_cast_reg_2858(14 downto 3) <= tmp_i1_cast_fu_1163_p1(14 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                    nbh(14 downto 0) <= nbl_assign_3_cast_fu_2199_p1(14 downto 0);
                ph <= tmp_40_fu_2234_p2;
                wd2_4_cast_reg_3084 <= nbl_assign_3_fu_2193_p3(14 downto 11);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                p_01_rec_i1_reg_2986 <= p_01_rec_i1_fu_1804_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                p_01_rec_i_reg_2800 <= p_01_rec_i_fu_998_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_746_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                phitmp_reg_2696 <= phitmp_fu_770_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = exitcond5_fu_1010_p2) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    pl_1_reg_2818(63 downto 1) <= pl_1_fu_1034_p2(63 downto 1);
                    tmp_56_i_reg_2823(63 downto 1) <= tmp_56_i_fu_1054_p2(63 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = exitcond4_fu_1816_p2) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                pl_4_reg_3004 <= pl_4_fu_1840_p2;
                tmp_56_i1_reg_3009 <= tmp_56_i1_fu_1860_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_upzero_fu_653_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                plt1 <= plt;
                plt2 <= plt1;
                tmp_19_i_reg_2948 <= tmp_19_i_fu_1479_p2;
                tmp_38_reg_2942 <= tmp_15_i_fu_1461_p2(63 downto 63);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                qq4_code4_table_load_reg_2911 <= qq4_code4_table_q0;
                tmp_30_reg_2916 <= tmp_30_fu_1323_p1;
                tmp_45_i_reg_2921 <= tmp_45_i_fu_1327_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state2))) then
                reg_688 <= tqmf_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                sh <= tmp_26_fu_1921_p2;
                tmp_26_reg_3029 <= tmp_26_fu_1921_p2;
                    tmp_31_reg_3039(42 downto 3) <= tmp_31_fu_1941_p2(42 downto 3);
                tmp_50_i1_reg_3024 <= zl1_i1_reg_623(45 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_1_reg_2716 <= tmp_1_fu_796_p2;
                tmp_9_reg_2711 <= tmp_9_fu_783_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_934_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                tmp_3_reg_2780 <= tmp_4_fu_946_p2(46 downto 15);
                xh <= tmp_10_fu_966_p2(46 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                    tmp_47_cast1_reg_3055(14 downto 3) <= tmp_47_cast1_fu_1992_p1(14 downto 3);
                tmp_54_reg_3044 <= n_assign_2_fu_1951_p2(31 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                tmp_53_i1_reg_3014 <= tmp_53_i1_fu_1874_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                tmp_53_i_reg_2828 <= tmp_53_i_fu_1068_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                tmp_58_i_reg_2838 <= pl_2_fu_1079_p2(46 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                tmp_5_reg_2883 <= tmp_38_i_fu_1187_p2(46 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp_s_reg_2731 <= tmp_s_fu_824_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                xa_1_cast_reg_2742 <= xa_1_cast_fu_846_p2;
                xa_1_reg_2737 <= xa_1_fu_840_p2;
                xb_1_cast_reg_2752 <= xb_1_cast_fu_900_p2;
                xb_1_reg_2747 <= xb_1_fu_894_p2;
            end if;
        end if;
    end process;
    detl(2 downto 0) <= "000";
    detl(31 downto 15) <= "00000000000000000";
    il(31 downto 6) <= "00000000000000000000000000";
    nbl(31 downto 15) <= "00000000000000000";
    ih(31 downto 2) <= "000000000000000000000000000000";
    deth(2 downto 0) <= "000";
    deth(31 downto 15) <= "00000000000000000";
    nbh(31 downto 15) <= "00000000000000000";
    pl_1_reg_2818(0) <= '0';
    tmp_56_i_reg_2823(0) <= '0';
    tmp_i1_cast_reg_2858(2 downto 0) <= "000";
    tmp_i1_cast_reg_2858(46 downto 15) <= "00000000000000000000000000000000";
    tmp_31_reg_3039(2 downto 0) <= "000";
    tmp_47_cast1_reg_3055(2 downto 0) <= "000";
    tmp_47_cast1_reg_3055(46 downto 15) <= "00000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state4, exitcond2_fu_746_p2, ap_CS_fsm_state10, exitcond_fu_934_p2, ap_CS_fsm_state14, exitcond5_fu_1010_p2, tmp_35_i_fu_1167_p2, tmp_35_i_reg_2864, ap_CS_fsm_state19, ap_CS_fsm_state22, tmp_39_i_fu_1202_p2, ap_CS_fsm_state27, grp_upzero_fu_653_ap_done, ap_CS_fsm_state31, exitcond4_fu_1816_p2, ap_CS_fsm_state35, ap_CS_fsm_state39, tmp_32_fu_2030_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 =>
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 =>
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 =>
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 =>
                if (((exitcond2_fu_746_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 =>
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 =>
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 =>
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state8 =>
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 =>
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 =>
                if (((exitcond_fu_934_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 =>
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state12 =>
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 =>
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 =>
                if (((ap_const_lv1_1 = exitcond5_fu_1010_p2) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 =>
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 =>
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state17 =>
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 =>
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 =>
                if (((ap_const_lv1_0 = tmp_35_i_fu_1167_p2) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 =>
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 =>
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 =>
                if (((ap_const_logic_1 = ap_CS_fsm_state22) and ((ap_const_lv1_0 = tmp_39_i_fu_1202_p2) or (ap_const_lv1_0 = tmp_35_i_reg_2864)))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state23 =>
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 =>
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 =>
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 =>
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 =>
                if (((grp_upzero_fu_653_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state28 =>
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 =>
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 =>
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 =>
                if (((ap_const_lv1_1 = exitcond4_fu_1816_p2) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state32 =>
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 =>
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state34 =>
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 =>
                if (((ap_const_lv1_0 = tmp_32_fu_2030_p2) and (ap_const_logic_1 = ap_CS_fsm_state35))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when ap_ST_fsm_state36 =>
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 =>
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 =>
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 =>
                if (((grp_upzero_fu_653_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state39;
                end if;
            when ap_ST_fsm_state40 =>
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 =>
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 =>
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
            ap_done <= ap_const_logic_1;
        else
            ap_done <= ap_const_logic_0;
        end if;
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
            ap_idle <= ap_const_logic_1;
        else
            ap_idle <= ap_const_logic_0;
        end if;
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
            ap_ready <= ap_const_logic_1;
        else
            ap_ready <= ap_const_logic_0;
        end if;
    end process;

    ap_return <= (tmp_65_fu_2636_p2 or il);
        apl1_2_cast_fu_1732_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(apl1_2_fu_1726_p2),32));

    apl1_2_fu_1726_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(apl1_8_cast1_fu_1702_p1));
        apl1_3_cast_fu_1750_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(apl1_3_fu_1742_p3),32));

    apl1_3_fu_1742_p3 <=
        apl1_2_fu_1726_p2 when (tmp_31_i_fu_1736_p2(0) = '1') else
        tmp_51_fu_1722_p1;
    apl1_4_fu_2488_p2 <= std_logic_vector(unsigned(apl_v_i1_cast_cast_fu_2481_p3) + unsigned(tmp_29_i1_fu_2471_p4));
        apl1_6_cast_fu_2568_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(apl1_6_fu_2562_p2),32));

    apl1_6_fu_2562_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(apl1_9_cast8_fu_2538_p1));
        apl1_7_cast_fu_2586_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(apl1_7_fu_2578_p3),32));

    apl1_7_fu_2578_p3 <=
        apl1_6_fu_2562_p2 when (tmp_31_i1_fu_2572_p2(0) = '1') else
        tmp_64_fu_2558_p1;
    apl1_8_cast1_fu_1702_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(apl1_8_fu_1697_p2),16));
    apl1_8_cast_fu_1706_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(apl1_8_fu_1697_p2),32));
    apl1_8_fu_1697_p2 <= std_logic_vector(unsigned(ap_const_lv15_3C00) - unsigned(apl2_assign_reg_2965));
    apl1_9_cast8_fu_2538_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(apl1_9_fu_2533_p2),16));
    apl1_9_cast_fu_2542_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(apl1_9_fu_2533_p2),32));
    apl1_9_fu_2533_p2 <= std_logic_vector(unsigned(ap_const_lv15_3C00) - unsigned(apl2_assign_1_reg_3117));
    apl1_fu_1652_p2 <= std_logic_vector(unsigned(apl_v_i_cast_cast_fu_1645_p3) + unsigned(tmp_29_i_fu_1635_p4));
    apl2_1_fu_2447_p2 <= std_logic_vector(signed(tmp7_cast_fu_2443_p1) + signed(tmp_4_i1_fu_2419_p4));
        apl2_assign_1_cast_fu_2524_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(apl2_assign_1_reg_3117),32));

    apl2_assign_1_fu_2516_p3 <=
        ap_const_lv15_5000 when (tmp_24_i1_fu_2510_p2(0) = '1') else
        tmp_63_fu_2506_p1;
        apl2_assign_cast_fu_1688_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(apl2_assign_reg_2965),32));

    apl2_assign_fu_1680_p3 <=
        ap_const_lv15_5000 when (tmp_24_i_fu_1674_p2(0) = '1') else
        tmp_50_fu_1670_p1;
    apl2_fu_1611_p2 <= std_logic_vector(signed(tmp6_cast_fu_1607_p1) + signed(tmp_4_i_fu_1583_p4));
    apl_v_i1_cast_cast_fu_2481_p3 <=
        ap_const_lv32_FFFFFF40 when (tmp_59_reg_3094(0) = '1') else
        ap_const_lv32_C0;
    apl_v_i_cast_cast_fu_1645_p3 <=
        ap_const_lv32_FFFFFF40 when (tmp_38_reg_2942(0) = '1') else
        ap_const_lv32_C0;
        decis_fu_2004_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_11_fu_1995_p4),32));

    decis_levl_address0 <= tmp_36_i_fu_1179_p1(5 - 1 downto 0);

    decis_levl_ce0_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
            decis_levl_ce0 <= ap_const_logic_1;
        else
            decis_levl_ce0 <= ap_const_logic_0;
        end if;
    end process;


    delay_bph_address0_assign_proc : process(ap_CS_fsm_state28, ap_CS_fsm_state31, ap_CS_fsm_state39, grp_upzero_fu_653_bli_address0, p_01_rec_i1_cast_fu_1810_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
            delay_bph_address0 <= p_01_rec_i1_cast_fu_1810_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then
            delay_bph_address0 <= ap_const_lv3_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then
            delay_bph_address0 <= grp_upzero_fu_653_bli_address0;
        else
            delay_bph_address0 <= "XXX";
        end if;
    end process;


    delay_bph_ce0_assign_proc : process(ap_CS_fsm_state28, ap_CS_fsm_state31, ap_CS_fsm_state39, grp_upzero_fu_653_bli_ce0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state28))) then
            delay_bph_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then
            delay_bph_ce0 <= grp_upzero_fu_653_bli_ce0;
        else
            delay_bph_ce0 <= ap_const_logic_0;
        end if;
    end process;


    delay_bph_we0_assign_proc : process(ap_CS_fsm_state39, grp_upzero_fu_653_bli_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then
            delay_bph_we0 <= grp_upzero_fu_653_bli_we0;
        else
            delay_bph_we0 <= ap_const_logic_0;
        end if;
    end process;


    delay_bpl_address0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state27, grp_upzero_fu_653_bli_address0, p_01_rec_i_cast_fu_1004_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
            delay_bpl_address0 <= p_01_rec_i_cast_fu_1004_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then
            delay_bpl_address0 <= ap_const_lv3_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then
            delay_bpl_address0 <= grp_upzero_fu_653_bli_address0;
        else
            delay_bpl_address0 <= "XXX";
        end if;
    end process;


    delay_bpl_ce0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state27, grp_upzero_fu_653_bli_ce0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state10))) then
            delay_bpl_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then
            delay_bpl_ce0 <= grp_upzero_fu_653_bli_ce0;
        else
            delay_bpl_ce0 <= ap_const_logic_0;
        end if;
    end process;


    delay_bpl_we0_assign_proc : process(ap_CS_fsm_state27, grp_upzero_fu_653_bli_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
            delay_bpl_we0 <= grp_upzero_fu_653_bli_we0;
        else
            delay_bpl_we0 <= ap_const_logic_0;
        end if;
    end process;


    delay_dhx_address0_assign_proc : process(ap_CS_fsm_state28, ap_CS_fsm_state31, ap_CS_fsm_state39, grp_upzero_fu_653_dlti_address0, p_01_rec_i1_cast_fu_1810_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
            delay_dhx_address0 <= p_01_rec_i1_cast_fu_1810_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then
            delay_dhx_address0 <= ap_const_lv3_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then
            delay_dhx_address0 <= grp_upzero_fu_653_dlti_address0;
        else
            delay_dhx_address0 <= "XXX";
        end if;
    end process;


    delay_dhx_ce0_assign_proc : process(ap_CS_fsm_state28, ap_CS_fsm_state31, ap_CS_fsm_state39, grp_upzero_fu_653_dlti_ce0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state28))) then
            delay_dhx_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then
            delay_dhx_ce0 <= grp_upzero_fu_653_dlti_ce0;
        else
            delay_dhx_ce0 <= ap_const_logic_0;
        end if;
    end process;


    delay_dhx_ce1_assign_proc : process(ap_CS_fsm_state39, grp_upzero_fu_653_dlti_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then
            delay_dhx_ce1 <= grp_upzero_fu_653_dlti_ce1;
        else
            delay_dhx_ce1 <= ap_const_logic_0;
        end if;
    end process;


    delay_dhx_we0_assign_proc : process(ap_CS_fsm_state39, grp_upzero_fu_653_dlti_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then
            delay_dhx_we0 <= grp_upzero_fu_653_dlti_we0;
        else
            delay_dhx_we0 <= ap_const_logic_0;
        end if;
    end process;


    delay_dhx_we1_assign_proc : process(ap_CS_fsm_state39, grp_upzero_fu_653_dlti_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then
            delay_dhx_we1 <= grp_upzero_fu_653_dlti_we1;
        else
            delay_dhx_we1 <= ap_const_logic_0;
        end if;
    end process;


    delay_dltx_address0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state27, grp_upzero_fu_653_dlti_address0, p_01_rec_i_cast_fu_1004_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
            delay_dltx_address0 <= p_01_rec_i_cast_fu_1004_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then
            delay_dltx_address0 <= ap_const_lv3_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then
            delay_dltx_address0 <= grp_upzero_fu_653_dlti_address0;
        else
            delay_dltx_address0 <= "XXX";
        end if;
    end process;


    delay_dltx_ce0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state27, grp_upzero_fu_653_dlti_ce0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state10))) then
            delay_dltx_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then
            delay_dltx_ce0 <= grp_upzero_fu_653_dlti_ce0;
        else
            delay_dltx_ce0 <= ap_const_logic_0;
        end if;
    end process;


    delay_dltx_ce1_assign_proc : process(ap_CS_fsm_state27, grp_upzero_fu_653_dlti_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
            delay_dltx_ce1 <= grp_upzero_fu_653_dlti_ce1;
        else
            delay_dltx_ce1 <= ap_const_logic_0;
        end if;
    end process;


    delay_dltx_we0_assign_proc : process(ap_CS_fsm_state27, grp_upzero_fu_653_dlti_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
            delay_dltx_we0 <= grp_upzero_fu_653_dlti_we0;
        else
            delay_dltx_we0 <= ap_const_logic_0;
        end if;
    end process;


    delay_dltx_we1_assign_proc : process(ap_CS_fsm_state27, grp_upzero_fu_653_dlti_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
            delay_dltx_we1 <= grp_upzero_fu_653_dlti_we1;
        else
            delay_dltx_we1 <= ap_const_logic_0;
        end if;
    end process;

    el_assign_fu_1126_p2 <= std_logic_vector(unsigned(tmp_3_reg_2780) - unsigned(tmp_13_fu_1115_p2));
    exitcond2_fu_746_p2 <= "1" when (i_reg_537 = ap_const_lv4_A) else "0";
    exitcond4_fu_1816_p2 <= "1" when (dlt_pn_rec_i1_reg_633 = ap_const_lv3_5) else "0";
    exitcond5_fu_1010_p2 <= "1" when (dlt_pn_rec_i_reg_600 = ap_const_lv3_5) else "0";
    exitcond_fu_934_p2 <= "1" when (i_1_reg_579 = ap_const_lv5_16) else "0";
    grp_upzero_fu_653_ap_start <= ap_reg_grp_upzero_fu_653_ap_start;

    grp_upzero_fu_653_bli_q0_assign_proc : process(delay_bpl_q0, delay_bph_q0, ap_CS_fsm_state27, ap_CS_fsm_state39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then
            grp_upzero_fu_653_bli_q0 <= delay_bph_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then
            grp_upzero_fu_653_bli_q0 <= delay_bpl_q0;
        else
            grp_upzero_fu_653_bli_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if;
    end process;


    grp_upzero_fu_653_dlt_assign_proc : process(tmp_19_reg_2926, ap_CS_fsm_state27, tmp_36_reg_3068, ap_CS_fsm_state39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then
            grp_upzero_fu_653_dlt <= tmp_36_reg_3068;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then
            grp_upzero_fu_653_dlt <= tmp_19_reg_2926;
        else
            grp_upzero_fu_653_dlt <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if;
    end process;


    grp_upzero_fu_653_dlti_q0_assign_proc : process(delay_dltx_q0, delay_dhx_q0, ap_CS_fsm_state27, ap_CS_fsm_state39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then
            grp_upzero_fu_653_dlti_q0 <= delay_dhx_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then
            grp_upzero_fu_653_dlti_q0 <= delay_dltx_q0;
        else
            grp_upzero_fu_653_dlti_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if;
    end process;


    grp_upzero_fu_653_dlti_q1_assign_proc : process(delay_dltx_q1, delay_dhx_q1, ap_CS_fsm_state27, ap_CS_fsm_state39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then
            grp_upzero_fu_653_dlti_q1 <= delay_dhx_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then
            grp_upzero_fu_653_dlti_q1 <= delay_dltx_q1;
        else
            grp_upzero_fu_653_dlti_q1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if;
    end process;

    h_address0 <= tqmf_ptr_0_rec_cast_fu_740_p1(5 - 1 downto 0);
    h_address1 <= tqmf_ptr_0_sum1_cast_fu_764_p1(5 - 1 downto 0);

    h_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
            h_ce0 <= ap_const_logic_1;
        else
            h_ce0 <= ap_const_logic_0;
        end if;
    end process;


    h_ce1_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
            h_ce1 <= ap_const_logic_1;
        else
            h_ce1 <= ap_const_logic_0;
        end if;
    end process;

    i_4_fu_752_p2 <= std_logic_vector(unsigned(i_reg_537) + unsigned(ap_const_lv4_1));
    i_5_fu_940_p2 <= std_logic_vector(unsigned(i_1_reg_579) + unsigned(ap_const_lv5_1));
    il_assign_cast_fu_1219_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ril_2_fu_1212_p3),32));

    ilb_table_address0_assign_proc : process(ap_CS_fsm_state25, ap_CS_fsm_state38, tmp_i3_fu_1393_p1, tmp_i1_fu_2229_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
            ilb_table_address0 <= tmp_i1_fu_2229_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then
            ilb_table_address0 <= tmp_i3_fu_1393_p1(5 - 1 downto 0);
        else
            ilb_table_address0 <= "XXXXX";
        end if;
    end process;


    ilb_table_ce0_assign_proc : process(ap_CS_fsm_state25, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state25))) then
            ilb_table_ce0 <= ap_const_logic_1;
        else
            ilb_table_ce0 <= ap_const_logic_0;
        end if;
    end process;

    m_1_fu_2016_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(n_assign_2_fu_1951_p2));
    m_fu_1149_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(el_assign_fu_1126_p2));
    mil_fu_1173_p2 <= std_logic_vector(unsigned(mil_i_reg_611) + unsigned(ap_const_lv5_1));
    n_assign_1_fu_1155_p3 <=
        m_fu_1149_p2 when (tmp_27_fu_1141_p3(0) = '1') else
        el_assign_fu_1126_p2;
    n_assign_2_fu_1951_p2 <= std_logic_vector(unsigned(xh) - unsigned(tmp_26_reg_3029));
    n_assign_3_fu_2022_p3 <=
        m_1_fu_2016_p2 when (tmp_55_fu_2008_p3(0) = '1') else
        n_assign_2_fu_1951_p2;
    nbh_assign_1_cast_fu_2161_p2 <= std_logic_vector(unsigned(tmp_39_fu_2141_p4) + unsigned(tmp_56_fu_2151_p1));
    nbh_assign_1_fu_2155_p2 <= std_logic_vector(unsigned(tmp_37_fu_2127_p6) + unsigned(wd_fu_2117_p4));
    nbl_assign_1_cast_fu_1301_p2 <= std_logic_vector(unsigned(tmp_6_fu_1281_p4) + unsigned(tmp_7_fu_1291_p1));
    nbl_assign_1_fu_1295_p2 <= std_logic_vector(signed(wl_code_table_load_c_fu_1277_p1) + signed(tmp_42_i_fu_1267_p4));
    nbl_assign_2_cast_fu_1363_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(nbl_assign_2_fu_1357_p3),32));
    nbl_assign_2_fu_1357_p3 <=
        ap_const_lv15_4800 when (tmp_45_i_reg_2921(0) = '1') else
        tmp_30_reg_2916;
    nbl_assign_3_cast_fu_2199_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(nbl_assign_3_fu_2193_p3),32));
    nbl_assign_3_fu_2193_p3 <=
        ap_const_lv15_5800 when (tmp_48_i_reg_3079(0) = '1') else
        tmp_58_reg_3074;
    p_01_rec_i1_cast_fu_1810_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_01_rec_i1_fu_1804_p2),64));
    p_01_rec_i1_fu_1804_p2 <= std_logic_vector(unsigned(dlt_pn_rec_i1_reg_633) + unsigned(ap_const_lv3_1));
    p_01_rec_i_cast_fu_1004_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_01_rec_i_fu_998_p2),64));
    p_01_rec_i_fu_998_p2 <= std_logic_vector(unsigned(dlt_pn_rec_i_reg_600) + unsigned(ap_const_lv3_1));
    p_i1_fu_1663_p3 <=
        ap_const_lv32_3000 when (tmp_23_i_fu_1658_p2(0) = '1') else
        apl2_reg_2953;
    p_i2_fu_2175_p3 <=
        ap_const_lv31_0 when (tmp_57_fu_2167_p3(0) = '1') else
        nbh_assign_1_cast_fu_2161_p2;
    p_i3_fu_2499_p3 <=
        ap_const_lv32_3000 when (tmp_23_i1_fu_2494_p2(0) = '1') else
        apl2_1_reg_3105;
    p_i_fu_1315_p3 <=
        ap_const_lv31_0 when (tmp_28_fu_1307_p3(0) = '1') else
        nbl_assign_1_cast_fu_1301_p2;
        p_shl1_cast_fu_712_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl1_fu_704_p3),37));

    p_shl1_fu_704_p3 <= (tqmf_q0 & ap_const_lv2_0);
        p_shl2_cast_fu_860_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl2_fu_852_p3),37));

    p_shl2_fu_852_p3 <= (tqmf_q0 & ap_const_lv4_0);
        p_shl3_cast_fu_872_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl3_fu_864_p3),37));

    p_shl3_fu_864_p3 <= (tqmf_q0 & ap_const_lv2_0);
        p_shl_cast_fu_700_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl_fu_692_p3),37));

    p_shl_fu_692_p3 <= (tqmf_q0 & ap_const_lv4_0);
    p_shl_i1_cast_fu_1552_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_i1_fu_1544_p3),40));
    p_shl_i1_fu_1544_p3 <= (al2 & ap_const_lv7_0);
    p_shl_i2_cast_fu_1625_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_i2_fu_1617_p3),41));
    p_shl_i2_fu_1617_p3 <= (al1 & ap_const_lv8_0);
    p_shl_i3_fu_2103_p3 <= (nbh & ap_const_lv7_0);
    p_shl_i4_cast_fu_2388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_i4_fu_2380_p3),40));
    p_shl_i4_fu_2380_p3 <= (ah2 & ap_const_lv7_0);
    p_shl_i5_cast_fu_2461_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_i5_fu_2453_p3),41));
    p_shl_i5_fu_2453_p3 <= (ah1 & ap_const_lv8_0);
    p_shl_i_fu_1253_p3 <= (nbl & ap_const_lv7_0);
    p_sum_cast_fu_912_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_sum_fu_906_p2),64));
    p_sum_fu_906_p2 <= std_logic_vector(unsigned(tqmf_ptr_0_pn_rec_reg_568) + unsigned(ap_const_lv6_17));
    phitmp_fu_770_p2 <= std_logic_vector(unsigned(tqmf_ptr_0_rec_reg_526) + unsigned(ap_const_lv5_2));
    pl_1_fu_1034_p0 <= al1;
    pl_1_fu_1034_p1 <= tmp_20_fu_1020_p2;
    pl_1_fu_1034_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(pl_1_fu_1034_p0) * signed(pl_1_fu_1034_p1))), 64));
    pl_2_fu_1079_p2 <= std_logic_vector(unsigned(tmp_56_i_reg_2823) + unsigned(pl_1_reg_2818));
    pl_4_fu_1840_p0 <= tmp_52_fu_1826_p2;
    pl_4_fu_1840_p1 <= ah1;
    pl_4_fu_1840_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(pl_4_fu_1840_p0) * signed(pl_4_fu_1840_p1))), 64));
    pl_5_fu_1901_p2 <= std_logic_vector(unsigned(pl_4_reg_3004) + unsigned(tmp_56_i1_reg_3009));
    qq4_code4_table_address0 <= tmp_16_fu_1239_p1(4 - 1 downto 0);

    qq4_code4_table_ce0_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
            qq4_code4_table_ce0 <= ap_const_logic_1;
        else
            qq4_code4_table_ce0 <= ap_const_logic_0;
        end if;
    end process;

    quant26bt_neg_address0 <= tmp_41_i_fu_1206_p1(5 - 1 downto 0);

    quant26bt_neg_ce0_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
            quant26bt_neg_ce0 <= ap_const_logic_1;
        else
            quant26bt_neg_ce0 <= ap_const_logic_0;
        end if;
    end process;

    quant26bt_pos_address0 <= tmp_41_i_fu_1206_p1(5 - 1 downto 0);

    quant26bt_pos_ce0_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
            quant26bt_pos_ce0 <= ap_const_logic_1;
        else
            quant26bt_pos_ce0 <= ap_const_logic_0;
        end if;
    end process;

    ril_2_fu_1212_p3 <=
        quant26bt_neg_q0 when (tmp_27_reg_2848(0) = '1') else
        quant26bt_pos_q0;
        tmp6_cast_fu_1607_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp6_fu_1601_p2),32));

    tmp6_fu_1601_p2 <= std_logic_vector(signed(tmp_3_i_cast_fu_1579_p1) + signed(tmp_5_i_cast_cast_fu_1593_p3));
        tmp7_cast_fu_2443_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp7_fu_2437_p2),32));

    tmp7_fu_2437_p2 <= std_logic_vector(signed(tmp_3_i1_cast_fu_2415_p1) + signed(tmp_5_i1_cast_cast_fu_2429_p3));
    tmp_10_fu_966_p2 <= std_logic_vector(unsigned(xa_1_cast_reg_2742) - unsigned(xb_1_cast_reg_2752));
    tmp_11_fu_1995_p4 <= tmp_31_reg_3039(42 downto 12);
    tmp_13_fu_1115_p2 <= std_logic_vector(unsigned(tmp_58_i_reg_2838) + unsigned(tmp_50_i_fu_1099_p4));
    tmp_14_fu_1229_p4 <= ril_2_fu_1212_p3(5 downto 2);
        tmp_15_cast_fu_830_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_s_reg_2731),50));

    tmp_15_fu_836_p1 <= xa1_reg_548(47 - 1 downto 0);
    tmp_15_i1_fu_2297_p0 <= ph1;
    tmp_15_i1_fu_2297_p1 <= tmp_i10_fu_2289_p1(32 - 1 downto 0);
    tmp_15_i1_fu_2297_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_15_i1_fu_2297_p0) * signed(tmp_15_i1_fu_2297_p1))), 64));
    tmp_15_i_fu_1461_p0 <= plt1;
    tmp_15_i_fu_1461_p1 <= tmp_i4_fu_1453_p1(32 - 1 downto 0);
    tmp_15_i_fu_1461_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_15_i_fu_1461_p0) * signed(tmp_15_i_fu_1461_p1))), 64));
    tmp_16_fu_1239_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_1229_p4),64));
    tmp_17_fu_890_p1 <= xb1_reg_558(47 - 1 downto 0);
    tmp_18_fu_1336_p0 <= qq4_code4_table_load_reg_2911;
    tmp_18_fu_1336_p1 <= tmp_i1_cast_reg_2858(32 - 1 downto 0);
    tmp_18_fu_1336_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_18_fu_1336_p0) * signed(tmp_18_fu_1336_p1))), 47));
    tmp_19_i1_fu_2315_p0 <= ph2;
    tmp_19_i1_fu_2315_p1 <= tmp_i10_fu_2289_p1(32 - 1 downto 0);
    tmp_19_i1_fu_2315_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_19_i1_fu_2315_p0) * signed(tmp_19_i1_fu_2315_p1))), 64));
    tmp_19_i_fu_1479_p0 <= plt2;
    tmp_19_i_fu_1479_p1 <= tmp_i4_fu_1453_p1(32 - 1 downto 0);
    tmp_19_i_fu_1479_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_19_i_fu_1479_p0) * signed(tmp_19_i_fu_1479_p1))), 64));
    tmp_1_fu_796_p0 <= h_ptr_load_reg_2706;
    tmp_1_fu_796_p1 <= reg_688;
    tmp_1_fu_796_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_1_fu_796_p0) * signed(tmp_1_fu_796_p1))), 46));
    tmp_20_fu_1020_p2 <= std_logic_vector(shift_left(unsigned(rlt1),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
        tmp_20_i1_cast9_fu_2376_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ah2),40));

        tmp_20_i_cast_fu_1540_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(al2),40));

    tmp_21_fu_1431_p2 <= std_logic_vector(unsigned(tmp_50_i_reg_2843) + unsigned(tmp_19_reg_2926));
    tmp_21_i1_fu_2392_p2 <= std_logic_vector(unsigned(p_shl_i4_cast_fu_2388_p1) - unsigned(tmp_20_i1_cast9_fu_2376_p1));
    tmp_21_i_fu_1556_p2 <= std_logic_vector(unsigned(p_shl_i1_cast_fu_1552_p1) - unsigned(tmp_20_i_cast_fu_1540_p1));
        tmp_22_cast_fu_882_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_8_fu_876_p2),50));

    tmp_22_fu_1519_p4 <= al1(31 downto 5);
    tmp_23_fu_1040_p2 <= std_logic_vector(shift_left(unsigned(rlt2),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    tmp_23_i1_fu_2494_p2 <= "1" when (signed(apl2_1_reg_3105) > signed(ap_const_lv32_3000)) else "0";
    tmp_23_i_fu_1658_p2 <= "1" when (signed(apl2_reg_2953) > signed(ap_const_lv32_3000)) else "0";
        tmp_24_fu_1529_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_22_fu_1519_p4),28));

    tmp_24_i1_fu_2510_p2 <= "1" when (signed(p_i3_fu_2499_p3) < signed(ap_const_lv32_FFFFD000)) else "0";
    tmp_24_i_fu_1674_p2 <= "1" when (signed(p_i1_fu_1663_p3) < signed(ap_const_lv32_FFFFD000)) else "0";
        tmp_25_cast_fu_802_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_9_reg_2711),50));

    tmp_25_fu_1768_p2 <= std_logic_vector(unsigned(dlt) + unsigned(sl));
    tmp_26_fu_1921_p2 <= std_logic_vector(unsigned(tmp_50_i1_fu_1885_p4) + unsigned(tmp_58_i1_fu_1905_p4));
    tmp_27_fu_1141_p3 <= el_assign_fu_1126_p2(31 downto 31);
        tmp_28_cast_fu_811_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_reg_2716),50));

    tmp_28_fu_1307_p3 <= nbl_assign_1_fu_1295_p2(31 downto 31);
    tmp_29_fu_1970_p3 <=
        ap_const_lv2_1 when (tmp_54_fu_1962_p3(0) = '1') else
        ap_const_lv2_3;
    tmp_29_i1_fu_2471_p4 <= tmp_i11_fu_2465_p2(39 downto 8);
    tmp_29_i_fu_1635_p4 <= tmp_i5_fu_1629_p2(39 downto 8);
        tmp_2_fu_886_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_8_fu_876_p2),47));

    tmp_30_fu_1323_p1 <= p_i_fu_1315_p3(15 - 1 downto 0);
    tmp_30_i1_fu_2546_p2 <= "1" when (signed(apl1_4_reg_3111) > signed(apl1_9_cast_fu_2542_p1)) else "0";
    tmp_30_i_fu_1710_p2 <= "1" when (signed(apl1_reg_2959) > signed(apl1_8_cast_fu_1706_p1)) else "0";
    tmp_31_fu_1941_p1 <= deth;
    tmp_31_fu_1941_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv43_234) * signed(tmp_31_fu_1941_p1))), 43));
    tmp_31_i1_fu_2572_p2 <= "1" when (signed(wd3_0_apl1_i1_fu_2551_p3) < signed(apl1_6_cast_fu_2568_p1)) else "0";
    tmp_31_i_fu_1736_p2 <= "1" when (signed(wd3_0_apl1_i_fu_1715_p3) < signed(apl1_2_cast_fu_1732_p1)) else "0";
    tmp_32_fu_2030_p2 <= "1" when (signed(n_assign_3_fu_2022_p3) > signed(decis_fu_2004_p1)) else "0";
    tmp_33_fu_2036_p3 <=
        ap_const_lv2_0 when (tmp_54_reg_3044(0) = '1') else
        ap_const_lv2_2;
    tmp_33_i1_cast_cast_fu_2249_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_33_i1_fu_2244_p2),12));
    tmp_33_i1_fu_2244_p2 <= std_logic_vector(signed(ap_const_lv4_B) - signed(wd2_4_cast_reg_3084));
    tmp_33_i_cast_cast_fu_1403_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_33_i_fu_1398_p2),12));
    tmp_33_i_fu_1398_p2 <= std_logic_vector(signed(ap_const_lv4_9) - signed(wd2_cast_reg_2932));
    tmp_34_i1_cast_fu_2267_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_34_i1_fu_2259_p3),32));
    tmp_34_i1_fu_2259_p3 <= (wd3_2_fu_2253_p2 & ap_const_lv3_0);
    tmp_34_i_cast_fu_1421_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_34_i_fu_1413_p3),32));
    tmp_34_i_fu_1413_p3 <= (wd3_fu_1407_p2 & ap_const_lv3_0);
    tmp_35_fu_2074_p0 <= tmp_47_cast1_reg_3055(32 - 1 downto 0);
    tmp_35_fu_2074_p1 <= tmp_34_fu_2056_p6;
    tmp_35_fu_2074_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_35_fu_2074_p0) * signed(tmp_35_fu_2074_p1))), 47));
    tmp_35_i_fu_1167_p2 <= "1" when (unsigned(mil_i_reg_611) < unsigned(ap_const_lv5_1E)) else "0";
    tmp_36_i_fu_1179_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mil_i_reg_611),64));
    tmp_38_i_fu_1187_p0 <= tmp_i1_cast_reg_2858(32 - 1 downto 0);
    tmp_38_i_fu_1187_p1 <= tmp_38_i_fu_1187_p10(15 - 1 downto 0);
    tmp_38_i_fu_1187_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(decis_levl_load_reg_2878),47));
    tmp_38_i_fu_1187_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_38_i_fu_1187_p0) * signed('0' &tmp_38_i_fu_1187_p1))), 47));
    tmp_39_fu_2141_p4 <= tmp_i8_fu_2111_p2(37 downto 7);
    tmp_39_i_fu_1202_p2 <= "1" when (signed(n_assign_1_reg_2853) > signed(tmp_5_reg_2883)) else "0";
        tmp_3_i1_cast_fu_2415_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_62_fu_2408_p3),29));

        tmp_3_i_cast_fu_1579_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_47_fu_1572_p3),29));

    tmp_40_fu_2234_p2 <= std_logic_vector(unsigned(tmp_36_reg_3068) + unsigned(tmp_50_i1_reg_3024));
    tmp_41_fu_2355_p4 <= ah1(31 downto 5);
    tmp_41_i_fu_1206_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mil_i_reg_611),64));
    tmp_42_fu_1533_p3 <= tmp_19_i_reg_2948(63 downto 63);
    tmp_42_i_fu_1267_p4 <= tmp_i2_fu_1261_p2(38 downto 7);
        tmp_43_fu_2365_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_41_fu_2355_p4),28));

    tmp_44_fu_1562_p4 <= wd2_1_fu_1513_p2(34 downto 7);
    tmp_45_fu_2604_p2 <= std_logic_vector(unsigned(sh) + unsigned(dh));
    tmp_45_i_fu_1327_p2 <= "1" when (unsigned(p_i_fu_1315_p3) > unsigned(ap_const_lv31_4800)) else "0";
    tmp_46_cast_cast_fu_1978_p3 <=
        ap_const_lv32_1 when (tmp_54_fu_1962_p3(0) = '1') else
        ap_const_lv32_3;
        tmp_47_cast1_fu_1992_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(deth),47));

    tmp_47_fu_1572_p3 <=
        tmp_24_fu_1529_p1 when (tmp_38_reg_2942(0) = '1') else
        tmp_44_fu_1562_p4;
    tmp_48_i_fu_2187_p2 <= "1" when (unsigned(p_i2_fu_2175_p3) > unsigned(ap_const_lv31_5800)) else "0";
    tmp_4_fu_946_p2 <= std_logic_vector(unsigned(xa_1_reg_2737) + unsigned(xb_1_reg_2747));
    tmp_4_i1_fu_2419_p4 <= tmp_21_i1_fu_2392_p2(38 downto 7);
    tmp_4_i_fu_1583_p4 <= tmp_21_i_fu_1556_p2(38 downto 7);
    tmp_50_fu_1670_p1 <= p_i1_fu_1663_p3(15 - 1 downto 0);
    tmp_50_i1_fu_1885_p4 <= zl1_i1_reg_623(45 downto 14);
    tmp_50_i_fu_1099_p4 <= zl1_i_reg_590(45 downto 14);
    tmp_51_cast_cast_fu_2043_p3 <=
        ap_const_lv32_0 when (tmp_54_reg_3044(0) = '1') else
        ap_const_lv32_2;
    tmp_51_fu_1722_p1 <= wd3_0_apl1_i_fu_1715_p3(16 - 1 downto 0);
    tmp_52_fu_1826_p2 <= std_logic_vector(shift_left(unsigned(rh1),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    tmp_53_fu_1846_p2 <= std_logic_vector(shift_left(unsigned(rh2),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    tmp_53_i1_fu_1874_p0 <= delay_dhx_q0;
    tmp_53_i1_fu_1874_p1 <= delay_bph_q0;
    tmp_53_i1_fu_1874_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_53_i1_fu_1874_p0) * signed(tmp_53_i1_fu_1874_p1))), 64));
    tmp_53_i_fu_1068_p0 <= delay_dltx_q0;
    tmp_53_i_fu_1068_p1 <= delay_bpl_q0;
    tmp_53_i_fu_1068_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_53_i_fu_1068_p0) * signed(tmp_53_i_fu_1068_p1))), 64));
    tmp_54_fu_1962_p3 <= n_assign_2_fu_1951_p2(31 downto 31);
    tmp_55_fu_2008_p3 <= n_assign_2_fu_1951_p2(31 downto 31);
    tmp_56_fu_2151_p1 <= tmp_37_fu_2127_p6(31 - 1 downto 0);
    tmp_56_i1_fu_1860_p0 <= tmp_53_fu_1846_p2;
    tmp_56_i1_fu_1860_p1 <= ah2;
    tmp_56_i1_fu_1860_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_56_i1_fu_1860_p0) * signed(tmp_56_i1_fu_1860_p1))), 64));
    tmp_56_i_fu_1054_p0 <= al2;
    tmp_56_i_fu_1054_p1 <= tmp_23_fu_1040_p2;
    tmp_56_i_fu_1054_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_56_i_fu_1054_p0) * signed(tmp_56_i_fu_1054_p1))), 64));
    tmp_57_fu_2167_p3 <= nbh_assign_1_fu_2155_p2(31 downto 31);
    tmp_58_fu_2183_p1 <= p_i2_fu_2175_p3(15 - 1 downto 0);
    tmp_58_i1_fu_1905_p4 <= pl_5_fu_1901_p2(46 downto 15);
    tmp_5_i1_cast_cast_fu_2429_p3 <=
        ap_const_lv29_1FFFFF80 when (tmp_60_fu_2369_p3(0) = '1') else
        ap_const_lv29_80;
    tmp_5_i_cast_cast_fu_1593_p3 <=
        ap_const_lv29_1FFFFF80 when (tmp_42_fu_1533_p3(0) = '1') else
        ap_const_lv29_80;
    tmp_60_fu_2369_p3 <= tmp_19_i1_reg_3100(63 downto 63);
    tmp_61_fu_2398_p4 <= wd2_3_fu_2349_p2(34 downto 7);
    tmp_62_fu_2408_p3 <=
        tmp_43_fu_2365_p1 when (tmp_59_reg_3094(0) = '1') else
        tmp_61_fu_2398_p4;
    tmp_63_fu_2506_p1 <= p_i3_fu_2499_p3(15 - 1 downto 0);
    tmp_64_fu_2558_p1 <= wd3_0_apl1_i1_fu_2551_p3(16 - 1 downto 0);
    tmp_65_fu_2636_p2 <= std_logic_vector(shift_left(unsigned(ih),to_integer(unsigned('0' & ap_const_lv32_6(31-1 downto 0)))));
    tmp_6_fu_1281_p4 <= tmp_i2_fu_1261_p2(37 downto 7);
        tmp_7_fu_1291_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(wl_code_table_q0),31));

    tmp_8_fu_876_p2 <= std_logic_vector(signed(p_shl2_cast_fu_860_p1) - signed(p_shl3_cast_fu_872_p1));
    tmp_9_fu_783_p0 <= h_load_reg_2701;
    tmp_9_fu_783_p1 <= tqmf_q0;
    tmp_9_fu_783_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_9_fu_783_p0) * signed(tmp_9_fu_783_p1))), 46));
        tmp_fu_833_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_s_reg_2731),47));

        tmp_i10_cast_fu_2333_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ah1),41));

        tmp_i10_fu_2289_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ph),64));

    tmp_i11_fu_2465_p2 <= std_logic_vector(unsigned(p_shl_i5_cast_fu_2461_p1) - unsigned(tmp_i10_cast_fu_2333_p1));
        tmp_i1_cast_29_fu_1249_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(nbl),39));

        tmp_i1_cast_fu_1163_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(detl),47));

    tmp_i1_fu_2229_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wd1_1_fu_2209_p4),64));
    tmp_i2_fu_1261_p2 <= std_logic_vector(unsigned(p_shl_i_fu_1253_p3) - unsigned(tmp_i1_cast_29_fu_1249_p1));
        tmp_i3_cast_fu_1497_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(al1),41));

    tmp_i3_fu_1393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wd1_fu_1373_p4),64));
        tmp_i4_fu_1453_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(plt),64));

    tmp_i5_fu_1629_p2 <= std_logic_vector(unsigned(p_shl_i2_cast_fu_1625_p1) - unsigned(tmp_i3_cast_fu_1497_p1));
        tmp_i7_cast_fu_2099_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(nbh),39));

    tmp_i8_fu_2111_p2 <= std_logic_vector(unsigned(p_shl_i3_fu_2103_p3) - unsigned(tmp_i7_cast_fu_2099_p1));
    tmp_s_fu_824_p1 <= tqmf_q0;
    tmp_s_fu_824_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(ap_const_lv39_7FFFFFFFD4) * signed(tmp_s_fu_824_p1))), 39));

    tqmf_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state4, tqmf_addr_reg_2673, exitcond2_fu_746_p2, ap_CS_fsm_state8, ap_CS_fsm_state10, exitcond_fu_934_p2, tqmf_ptr_0_sum1_cast_fu_764_p1, tqmf_ptr_0_sum_cast_fu_929_p1)
    begin
        if (((ap_const_lv1_0 = exitcond_fu_934_p2) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
            tqmf_address0 <= tqmf_ptr_0_sum_cast_fu_929_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then
            tqmf_address0 <= ap_const_lv5_17;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then
            tqmf_address0 <= tqmf_addr_reg_2673;
        elsif (((exitcond2_fu_746_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
            tqmf_address0 <= ap_const_lv5_16;
        elsif (((exitcond2_fu_746_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
            tqmf_address0 <= tqmf_ptr_0_sum1_cast_fu_764_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then
            tqmf_address0 <= ap_const_lv5_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or ((exitcond_fu_934_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then
            tqmf_address0 <= ap_const_lv5_1;
        else
            tqmf_address0 <= "XXXXX";
        end if;
    end process;


    tqmf_address1_assign_proc : process(tqmf_addr_2_reg_2757, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
            tqmf_address1 <= tqmf_addr_2_reg_2757;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then
            tqmf_address1 <= ap_const_lv5_0;
        else
            tqmf_address1 <= "XXXXX";
        end if;
    end process;


    tqmf_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state4, exitcond2_fu_746_p2, ap_CS_fsm_state8, ap_CS_fsm_state10, exitcond_fu_934_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_lv1_0 = exitcond_fu_934_p2) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((exitcond_fu_934_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((exitcond2_fu_746_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((exitcond2_fu_746_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then
            tqmf_ce0 <= ap_const_logic_1;
        else
            tqmf_ce0 <= ap_const_logic_0;
        end if;
    end process;


    tqmf_ce1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then
            tqmf_ce1 <= ap_const_logic_1;
        else
            tqmf_ce1 <= ap_const_logic_0;
        end if;
    end process;


    tqmf_d1_assign_proc : process(xin2, tqmf_q0, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
            tqmf_d1 <= tqmf_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then
            tqmf_d1 <= xin2;
        else
            tqmf_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if;
    end process;

    tqmf_ptr1_0_rec_fu_917_p2 <= std_logic_vector(unsigned(tqmf_ptr_0_pn_rec_reg_568) + unsigned(ap_const_lv6_3F));
    tqmf_ptr_0_rec_cast_fu_740_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tqmf_ptr_0_rec_reg_526),64));
    tqmf_ptr_0_sum1_cast_fu_764_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tqmf_ptr_0_sum1_fu_758_p2),64));
    tqmf_ptr_0_sum1_fu_758_p2 <= (tqmf_ptr_0_rec_reg_526 or ap_const_lv5_1);
    tqmf_ptr_0_sum_cast_fu_929_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tqmf_ptr_0_sum_fu_923_p2),64));
    tqmf_ptr_0_sum_fu_923_p2 <= std_logic_vector(unsigned(tqmf_ptr_0_pn_rec_reg_568) + unsigned(ap_const_lv6_15));

    tqmf_we0_assign_proc : process(ap_CS_fsm_state10, exitcond_fu_934_p2)
    begin
        if (((exitcond_fu_934_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
            tqmf_we0 <= ap_const_logic_1;
        else
            tqmf_we0 <= ap_const_logic_0;
        end if;
    end process;


    tqmf_we1_assign_proc : process(ap_CS_fsm_state10, exitcond_fu_934_p2, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((exitcond_fu_934_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then
            tqmf_we1 <= ap_const_logic_1;
        else
            tqmf_we1 <= ap_const_logic_0;
        end if;
    end process;

    wd1_1_fu_2209_p4 <= nbl_assign_3_fu_2193_p3(10 downto 6);
    wd1_fu_1373_p4 <= nbl_assign_2_fu_1357_p3(10 downto 6);
        wd2_1_cast_fu_1509_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(wd2_fu_1501_p3),35));

    wd2_1_fu_1513_p2 <= std_logic_vector(unsigned(ap_const_lv35_0) - unsigned(wd2_1_cast_fu_1509_p1));
    wd2_2_fu_2337_p3 <= (ah1 & ap_const_lv2_0);
    wd2_3_fu_2349_p2 <= std_logic_vector(unsigned(ap_const_lv35_0) - unsigned(wd2_5_cast_fu_2345_p1));
        wd2_5_cast_fu_2345_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(wd2_2_fu_2337_p3),35));

    wd2_fu_1501_p3 <= (al1 & ap_const_lv2_0);
    wd3_0_apl1_i1_fu_2551_p3 <=
        apl1_9_cast_fu_2542_p1 when (tmp_30_i1_fu_2546_p2(0) = '1') else
        apl1_4_reg_3111;
    wd3_0_apl1_i_fu_1715_p3 <=
        apl1_8_cast_fu_1706_p1 when (tmp_30_i_fu_1710_p2(0) = '1') else
        apl1_reg_2959;
    wd3_2_fu_2253_p2 <= std_logic_vector(shift_right(unsigned(ilb_table_q0),to_integer(unsigned('0' & tmp_33_i1_cast_cast_fu_2249_p1(12-1 downto 0)))));
    wd3_fu_1407_p2 <= std_logic_vector(shift_right(unsigned(ilb_table_q0),to_integer(unsigned('0' & tmp_33_i_cast_cast_fu_1403_p1(12-1 downto 0)))));
    wd_fu_2117_p4 <= tmp_i8_fu_2111_p2(38 downto 7);
    wl_code_table_address0 <= tmp_16_fu_1239_p1(4 - 1 downto 0);

    wl_code_table_ce0_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
            wl_code_table_ce0 <= ap_const_logic_1;
        else
            wl_code_table_ce0 <= ap_const_logic_0;
        end if;
    end process;

        wl_code_table_load_c_fu_1277_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(wl_code_table_q0),32));

    xa_1_cast_fu_846_p2 <= std_logic_vector(unsigned(tmp_15_fu_836_p1) + unsigned(tmp_fu_833_p1));
    xa_1_fu_840_p2 <= std_logic_vector(signed(tmp_15_cast_fu_830_p1) + signed(xa1_reg_548));
    xa_2_fu_805_p2 <= std_logic_vector(signed(tmp_25_cast_fu_802_p1) + signed(xa1_reg_548));
        xa_cast_fu_722_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xa_fu_716_p2),50));

    xa_fu_716_p2 <= std_logic_vector(signed(p_shl_cast_fu_700_p1) - signed(p_shl1_cast_fu_712_p1));
    xb_1_cast_fu_900_p2 <= std_logic_vector(unsigned(tmp_17_fu_890_p1) + unsigned(tmp_2_fu_886_p1));
    xb_1_fu_894_p2 <= std_logic_vector(signed(tmp_22_cast_fu_882_p1) + signed(xb1_reg_558));
    xb_2_fu_814_p2 <= std_logic_vector(signed(tmp_28_cast_fu_811_p1) + signed(xb1_reg_558));
        xb_cast_fu_736_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xb_fu_730_p2),50));

    xb_fu_730_p0 <= reg_688;
    xb_fu_730_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(xb_fu_730_p0) * signed(ap_const_lv39_7FFFFFFFD4))), 39));
    zl_1_fu_1074_p2 <= std_logic_vector(unsigned(tmp_53_i_reg_2828) + unsigned(zl1_i_reg_590));
    zl_2_fu_1798_p0 <= delay_bph_load_reg_2971;
    zl_2_fu_1798_p1 <= delay_dhx_load_reg_2976;
    zl_2_fu_1798_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(zl_2_fu_1798_p0) * signed(zl_2_fu_1798_p1))), 64));
    zl_3_fu_1880_p2 <= std_logic_vector(unsigned(tmp_53_i1_reg_3014) + unsigned(zl1_i1_reg_623));
    zl_fu_992_p0 <= delay_bpl_load_reg_2785;
    zl_fu_992_p1 <= delay_dltx_load_reg_2790;
    zl_fu_992_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(zl_fu_992_p0) * signed(zl_fu_992_p1))), 64));
end behav;
